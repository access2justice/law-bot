// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import { __asyncGenerator, __await } from "tslib";
/**
 * THIS IS AN AUTO-GENERATED FILE - DO NOT EDIT!
 *
 * Any changes you make here may be lost.
 *
 * If you need to make changes, please do so in the original source file, \{project-root\}/sources/custom
 */
export function polyfillStream(stream) {
    makeAsyncIterable(stream);
    return stream;
}
function makeAsyncIterable(webStream) {
    if (!webStream[Symbol.asyncIterator]) {
        webStream[Symbol.asyncIterator] = () => toAsyncIterable(webStream);
    }
    if (!webStream.values) {
        webStream.values = () => toAsyncIterable(webStream);
    }
}
function toAsyncIterable(stream) {
    return __asyncGenerator(this, arguments, function* toAsyncIterable_1() {
        const reader = stream.getReader();
        try {
            while (true) {
                const { value, done } = yield __await(reader.read());
                if (done) {
                    return yield __await(void 0);
                }
                yield yield __await(value);
            }
        }
        finally {
            const cancelPromise = reader.cancel();
            reader.releaseLock();
            yield __await(cancelPromise);
        }
    });
}
export async function streamToText(stream) {
    const reader = stream.getReader();
    const buffers = [];
    let length = 0;
    try {
        // eslint-disable-next-line no-constant-condition
        while (true) {
            const { value, done } = await reader.read();
            if (done) {
                return new TextDecoder().decode(concatBuffers(buffers, length));
            }
            length += value.length;
            buffers.push(value);
        }
    }
    finally {
        reader.releaseLock();
    }
}
function getBuffersLength(buffers) {
    return buffers.reduce((acc, curr) => acc + curr.length, 0);
}
function concatBuffers(buffers, len) {
    const length = len !== null && len !== void 0 ? len : getBuffersLength(buffers);
    const res = new Uint8Array(length);
    for (let i = 0, pos = 0; i < buffers.length; i++) {
        const buffer = buffers[i];
        res.set(buffer, pos);
        pos += buffer.length;
    }
    return res;
}
//# sourceMappingURL=readableStreamUtils.js.map
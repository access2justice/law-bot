// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import { __rest } from "tslib";
import { camelCaseKeys } from "../../util.js";
function getContentFilterResultsForPrompt({ prompt_annotations, prompt_filter_results, }) {
    var _a;
    const res = prompt_filter_results !== null && prompt_filter_results !== void 0 ? prompt_filter_results : prompt_annotations;
    return ((_a = res === null || res === void 0 ? void 0 : res.map((_a) => {
        var { content_filter_results } = _a, rest = __rest(_a, ["content_filter_results"]);
        return (Object.assign(Object.assign({}, camelCaseKeys(rest)), { contentFilterResults: parseContentFilterResultDetailsForPromptOutput(content_filter_results) }));
    })) !== null && _a !== void 0 ? _a : []);
}
export function getCompletionsResult(body) {
    const { created, choices, prompt_filter_results, prompt_annotations } = body, rest = __rest(body, ["created", "choices", "prompt_filter_results", "prompt_annotations"]);
    return Object.assign(Object.assign({}, camelCaseKeys(rest)), { created: new Date(created), promptFilterResults: getContentFilterResultsForPrompt({
            prompt_filter_results,
            prompt_annotations,
        }), choices: choices.map((_a) => {
            var { content_filter_results } = _a, choice = __rest(_a, ["content_filter_results"]);
            return (Object.assign(Object.assign({}, camelCaseKeys(choice)), (!content_filter_results
                ? {}
                : {
                    contentFilterResults: parseContentFilterResultsForChoiceOutput(content_filter_results),
                })));
        }) });
}
export function getChatCompletionsResult(body) {
    const { created, choices, prompt_filter_results, prompt_annotations } = body, rest = __rest(body, ["created", "choices", "prompt_filter_results", "prompt_annotations"]);
    return Object.assign(Object.assign({}, camelCaseKeys(rest)), { created: new Date(created), promptFilterResults: getContentFilterResultsForPrompt({
            prompt_filter_results,
            prompt_annotations,
        }), choices: !choices
            ? []
            : choices.map((_a) => {
                var { content_filter_results, delta, message } = _a, choice = __rest(_a, ["content_filter_results", "delta", "message"]);
                return (Object.assign(Object.assign(Object.assign(Object.assign({}, camelCaseKeys(choice)), (!delta ? {} : { delta: parseMessage(delta) })), (!message ? {} : { message: parseMessage(message) })), (!content_filter_results
                    ? {}
                    : {
                        contentFilterResults: parseContentFilterResultsForChoiceOutput(content_filter_results),
                    })));
            }) });
}
function parseMessage(message) {
    const { context, tool_calls } = message, rest = __rest(message, ["context", "tool_calls"]);
    return Object.assign(Object.assign(Object.assign({}, camelCaseKeys(rest)), { toolCalls: tool_calls !== null && tool_calls !== void 0 ? tool_calls : [] }), (!context
        ? {}
        : {
            context: Object.assign({}, (!context.messages
                ? {}
                : {
                    messages: context.messages.map(parseMessage),
                })),
        }));
}
function parseError(error) {
    var _a;
    return {
        error: Object.assign(Object.assign({}, error), { details: (_a = error["details"]) !== null && _a !== void 0 ? _a : [] }),
    };
}
function parseContentFilterResultDetailsForPromptOutput(_a = {}) {
    var { error } = _a, rest = __rest(_a, ["error"]);
    return error ? parseError(error) : camelCaseKeys(rest);
}
function parseContentFilterResultsForChoiceOutput(_a = {}) {
    var { error } = _a, rest = __rest(_a, ["error"]);
    return error ? parseError(error) : camelCaseKeys(rest);
}
//# sourceMappingURL=deserializers.js.map
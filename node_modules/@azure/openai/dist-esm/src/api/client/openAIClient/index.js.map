{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../src/api/client/openAIClient/index.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;;AAElC;;;;;;GAMG;AAEH,OAAO,EAAoB,mCAAmC,EAAE,MAAM,yBAAyB,CAAC;AAChG,OAAO,EAAE,UAAU,EAAE,MAAM,2BAA2B,CAAC;AACvD,OAAO,EAAE,kBAAkB,EAAE,MAAM,kBAAkB,CAAC;AAqCtD,OAAO,EAqBL,YAAY,GAEb,MAAM,wBAAwB,CAAC;AAChC,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAC7C,OAAO,EAAE,aAAa,EAAE,aAAa,EAAE,MAAM,eAAe,CAAC;AAC7D,OAAO,EAAE,wBAAwB,EAAE,oBAAoB,EAAE,MAAM,oBAAoB,CAAC;AAMpF,MAAM,UAAU,qCAAqC,CACnD,OAAe,EACf,YAAoB,EACpB,IAA+B,EAC/B,UAAqE;IACnE,cAAc,EAAE,EAAE;CACnB;IAID,OAAO,OAAO,CAAC,IAAI,CAAC,kDAAkD,EAAE,YAAY,CAAC,CAAC,IAAI,iCACrF,mCAAmC,CAAC,OAAO,CAAC,KAC/C,IAAI,EAAE;YACJ,IAAI,EAAE,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,QAAQ,CAAC;YAChD,QAAQ,EAAE,IAAI,CAAC,UAAU,CAAC;YAC1B,eAAe,EAAE,IAAI,CAAC,gBAAgB,CAAC;YACvC,QAAQ,EAAE,IAAI,CAAC,UAAU,CAAC;YAC1B,MAAM,EAAE,IAAI,CAAC,QAAQ,CAAC;YACtB,WAAW,EAAE,IAAI,CAAC,aAAa,CAAC;YAChC,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC;SACrB,IAGF,CAAC;AACJ,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,4CAA4C,CAChE,MAEmD;IAEnD,IAAI,YAAY,CAAC,MAAM,CAAC,EAAE,CAAC;QACzB,MAAM,MAAM,CAAC,IAAI,CAAC;IACpB,CAAC;IAED,OAAO,MAAM,CAAC,IAAI,CAAC;AACrB,CAAC;AAED;;;GAGG;AACH,MAAM,CAAC,KAAK,UAAU,gCAAgC,CACpD,OAAe,EACf,YAAoB,EACpB,IAA+B,EAC/B,UAAqE;IACnE,cAAc,EAAE,EAAE;CACnB;IAED,MAAM,MAAM,GAAG,MAAM,qCAAqC,CAAC,OAAO,EAAE,YAAY,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;IACjG,OAAO,4CAA4C,CAAC,MAAM,CAAC,CAAC;AAC9D,CAAC;AAED,MAAM,UAAU,0CAA0C,CACxD,OAAe,EACf,YAAoB,EACpB,IAA+B,EAC/B,UAA0E;IACxE,cAAc,EAAE,EAAE;CACnB;;IAKD,OAAO,OAAO,CAAC,IAAI,CAAC,kDAAkD,EAAE,YAAY,CAAC,CAAC,IAAI,iCACrF,mCAAmC,CAAC,OAAO,CAAC,KAC/C,WAAW,EAAE,MAAC,OAAO,CAAC,WAAmB,mCAAI,qBAAqB,EAClE,IAAI,EAAE;YACJ,IAAI,EAAE,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,QAAQ,CAAC;YAChD,QAAQ,EAAE,IAAI,CAAC,UAAU,CAAC;YAC1B,eAAe,EAAE,IAAI,CAAC,gBAAgB,CAAC;YACvC,QAAQ,EAAE,IAAI,CAAC,UAAU,CAAC;YAC1B,MAAM,EAAE,IAAI,CAAC,QAAQ,CAAC;YACtB,WAAW,EAAE,IAAI,CAAC,aAAa,CAAC;YAChC,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC;SACrB,IAIF,CAAC;AACJ,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,iDAAiD,CACrE,MAEwD;IAExD,IAAI,YAAY,CAAC,MAAM,CAAC,EAAE,CAAC;QACzB,MAAM,MAAM,CAAC,IAAI,CAAC;IACpB,CAAC;IAED,OAAO;QACL,IAAI,EAAE,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;QACzB,IAAI,EAAE,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;QACzB,QAAQ,EAAE,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC;QACjC,QAAQ,EAAE,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC;QACjC,QAAQ,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC;YAChC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC;YACzB,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;gBAClC,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC;gBACX,KAAK,EAAE,CAAC,CAAC,OAAO,CAAC;gBACjB,GAAG,EAAE,CAAC,CAAC,KAAK,CAAC;gBACb,IAAI,EAAE,CAAC,CAAC,MAAM,CAAC;gBACf,WAAW,EAAE,CAAC,CAAC,aAAa,CAAC;gBAC7B,UAAU,EAAE,CAAC,CAAC,aAAa,CAAC;gBAC5B,gBAAgB,EAAE,CAAC,CAAC,mBAAmB,CAAC;gBACxC,YAAY,EAAE,CAAC,CAAC,gBAAgB,CAAC;gBACjC,MAAM,EAAE,CAAC,CAAC,QAAQ,CAAC;gBACnB,IAAI,EAAE,CAAC,CAAC,MAAM,CAAC;aAChB,CAAC,CAAC;KACR,CAAC;AACJ,CAAC;AAED;;;GAGG;AACH,MAAM,CAAC,KAAK,UAAU,qCAAqC,CACzD,OAAe,EACf,YAAoB,EACpB,IAA+B,EAC/B,UAA0E;IACxE,cAAc,EAAE,EAAE;CACnB;IAED,MAAM,MAAM,GAAG,MAAM,0CAA0C,CAC7D,OAAO,EACP,YAAY,EACZ,IAAI,EACJ,OAAO,CACR,CAAC;IACF,OAAO,iDAAiD,CAAC,MAAM,CAAC,CAAC;AACnE,CAAC;AAED,MAAM,UAAU,mCAAmC,CACjD,OAAe,EACf,YAAoB,EACpB,IAA6B,EAC7B,UAAmE;IACjE,cAAc,EAAE,EAAE;CACnB;IAID,OAAO,OAAO,CAAC,IAAI,CAAC,gDAAgD,EAAE,YAAY,CAAC,CAAC,IAAI,iCACnF,mCAAmC,CAAC,OAAO,CAAC,KAC/C,IAAI,EAAE;YACJ,IAAI,EAAE,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,QAAQ,CAAC;YAChD,QAAQ,EAAE,IAAI,CAAC,UAAU,CAAC;YAC1B,eAAe,EAAE,IAAI,CAAC,gBAAgB,CAAC;YACvC,MAAM,EAAE,IAAI,CAAC,QAAQ,CAAC;YACtB,WAAW,EAAE,IAAI,CAAC,aAAa,CAAC;YAChC,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC;SACrB,IAGF,CAAC;AACJ,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,0CAA0C,CAC9D,MAAiG;IAEjG,IAAI,YAAY,CAAC,MAAM,CAAC,EAAE,CAAC;QACzB,MAAM,MAAM,CAAC,IAAI,CAAC;IACpB,CAAC;IAED,OAAO,MAAM,CAAC,IAAI,CAAC;AACrB,CAAC;AAED,sGAAsG;AACtG,MAAM,CAAC,KAAK,UAAU,8BAA8B,CAClD,OAAe,EACf,YAAoB,EACpB,IAA6B,EAC7B,UAAmE;IACjE,cAAc,EAAE,EAAE;CACnB;IAED,MAAM,MAAM,GAAG,MAAM,mCAAmC,CAAC,OAAO,EAAE,YAAY,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;IAC/F,OAAO,0CAA0C,CAAC,MAAM,CAAC,CAAC;AAC5D,CAAC;AAED,MAAM,UAAU,wCAAwC,CACtD,OAAe,EACf,YAAoB,EACpB,IAA6B,EAC7B,UAAwE;IACtE,cAAc,EAAE,EAAE;CACnB;;IAKD,OAAO,OAAO,CAAC,IAAI,CAAC,gDAAgD,EAAE,YAAY,CAAC,CAAC,IAAI,iCACnF,mCAAmC,CAAC,OAAO,CAAC,KAC/C,WAAW,EAAE,MAAC,OAAO,CAAC,WAAmB,mCAAI,qBAAqB,EAClE,IAAI,EAAE;YACJ,IAAI,EAAE,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,QAAQ,CAAC;YAChD,QAAQ,EAAE,IAAI,CAAC,UAAU,CAAC;YAC1B,eAAe,EAAE,IAAI,CAAC,gBAAgB,CAAC;YACvC,MAAM,EAAE,IAAI,CAAC,QAAQ,CAAC;YACtB,WAAW,EAAE,IAAI,CAAC,aAAa,CAAC;YAChC,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC;SACrB,IAIF,CAAC;AACJ,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,+CAA+C,CACnE,MAEsD;IAEtD,IAAI,YAAY,CAAC,MAAM,CAAC,EAAE,CAAC;QACzB,MAAM,MAAM,CAAC,IAAI,CAAC;IACpB,CAAC;IAED,OAAO;QACL,IAAI,EAAE,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;QACzB,IAAI,EAAE,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;QACzB,QAAQ,EAAE,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC;QACjC,QAAQ,EAAE,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC;QACjC,QAAQ,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC;YAChC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC;YACzB,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;gBAClC,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC;gBACX,KAAK,EAAE,CAAC,CAAC,OAAO,CAAC;gBACjB,GAAG,EAAE,CAAC,CAAC,KAAK,CAAC;gBACb,IAAI,EAAE,CAAC,CAAC,MAAM,CAAC;gBACf,WAAW,EAAE,CAAC,CAAC,aAAa,CAAC;gBAC7B,UAAU,EAAE,CAAC,CAAC,aAAa,CAAC;gBAC5B,gBAAgB,EAAE,CAAC,CAAC,mBAAmB,CAAC;gBACxC,YAAY,EAAE,CAAC,CAAC,gBAAgB,CAAC;gBACjC,MAAM,EAAE,CAAC,CAAC,QAAQ,CAAC;gBACnB,IAAI,EAAE,CAAC,CAAC,MAAM,CAAC;aAChB,CAAC,CAAC;KACR,CAAC;AACJ,CAAC;AAED,sGAAsG;AACtG,MAAM,CAAC,KAAK,UAAU,mCAAmC,CACvD,OAAe,EACf,YAAoB,EACpB,IAA6B,EAC7B,UAAwE;IACtE,cAAc,EAAE,EAAE;CACnB;IAED,MAAM,MAAM,GAAG,MAAM,wCAAwC,CAC3D,OAAO,EACP,YAAY,EACZ,IAAI,EACJ,OAAO,CACR,CAAC;IACF,OAAO,+CAA+C,CAAC,MAAM,CAAC,CAAC;AACjE,CAAC;AAED,MAAM,UAAU,mBAAmB,CACjC,OAAe,EACf,YAAoB,EACpB,IAAwB,EACxB,UAAmD,EAAE,cAAc,EAAE,EAAE,EAAE;IAEzE,OAAO,OAAO,CAAC,IAAI,CAAC,yCAAyC,EAAE,YAAY,CAAC,CAAC,IAAI,iCAC5E,mCAAmC,CAAC,OAAO,CAAC,KAC/C,IAAI,EAAE;YACJ,MAAM,EAAE,IAAI,CAAC,QAAQ,CAAC;YACtB,UAAU,EAAE,IAAI,CAAC,WAAW,CAAC;YAC7B,WAAW,EAAE,IAAI,CAAC,aAAa,CAAC;YAChC,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC;YACnB,UAAU,EAAE,IAAI,CAAC,WAAW,CAAC;YAC7B,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC;YAClB,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC;YACZ,QAAQ,EAAE,IAAI,CAAC,UAAU,CAAC;YAC1B,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC;YAClB,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC;YAClB,gBAAgB,EAAE,IAAI,CAAC,iBAAiB,CAAC;YACzC,iBAAiB,EAAE,IAAI,CAAC,kBAAkB,CAAC;YAC3C,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC;YACvB,MAAM,EAAE,IAAI,CAAC,QAAQ,CAAC;YACtB,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC;SACrB,IACD,CAAC;AACL,CAAC;AAED;;;;GAIG;AACH,MAAM,CAAC,KAAK,UAAU,cAAc,CAClC,OAAe,EACf,cAAsB,EACtB,MAAgB,EAChB,UAAiC,EAAE,cAAc,EAAE,EAAE,EAAE;IAEvD,MAAM,EAAE,WAAW,EAAE,UAAU,EAAE,cAAc,EAAE,cAAc,KAAc,OAAO,EAAhB,IAAI,UAAK,OAAO,EAA9E,iEAAoE,CAAU,CAAC;IACrF,MAAM,QAAQ,GAAG,MAAM,mBAAmB,CACxC,OAAO,EACP,cAAc,kBAEZ,MAAM,IACH,IAAI,GAET,EAAE,WAAW,EAAE,UAAU,EAAE,cAAc,EAAE,cAAc,EAAE,CAC5D,CAAC;IACF,OAAO,0BAA0B,CAAC,QAAQ,CAAC,CAAC;AAC9C,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,0BAA0B,CAC9C,MAAiE;IAEjE,IAAI,YAAY,CAAC,MAAM,CAAC,EAAE,CAAC;QACzB,MAAM,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;IAC1B,CAAC;IACD,OAAO,oBAAoB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AAC3C,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,8BAA8B,CAClD,MAAyE;IAEzE,IAAI,YAAY,CAAC,MAAM,CAAC,EAAE,CAAC;QACzB,MAAM,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;IAC1B,CAAC;IACD,OAAO,wBAAwB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AAC/C,CAAC;AAED,MAAM,UAAU,wBAAwB,CACtC,OAAe,EACf,YAAoB,EACpB,IAAqC,EACrC,UAAwD,EAAE,cAAc,EAAE,EAAE,EAAE;IAE9E,OAAO,OAAO,CAAC,IAAI,CAAC,gDAAgD,EAAE,YAAY,CAAC,CAAC,IAAI,iCACnF,mCAAmC,CAAC,OAAO,CAAC,KAC/C,IAAI,EAAE;YACJ,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC;YACpB,MAAM,EAAE,IAAI,CAAC,QAAQ,CAAC;YACtB,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC;YACZ,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC;YAClB,eAAe,EAAE,IAAI,CAAC,gBAAgB,CAAC;YACvC,OAAO,EAAE,IAAI,CAAC,SAAS,CAAC;YACxB,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC;YACpB,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC;SACnB,IACD,CAAC;AACL,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,+BAA+B,CACnD,MAA2E;IAE3E,IAAI,YAAY,CAAC,MAAM,CAAC,EAAE,CAAC;QACzB,MAAM,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;IAC1B,CAAC;IAED,OAAO;QACL,OAAO,EAAE,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACzC,IAAI,EAAE,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;YACpC,GAAG,EAAE,CAAC,CAAC,KAAK,CAAC;YACb,UAAU,EAAE,CAAC,CAAC,UAAU,CAAC;YACzB,aAAa,EAAE,CAAC,CAAC,gBAAgB,CAAC;SACnC,CAAC,CAAC;KACJ,CAAC;AACJ,CAAC;AAED,uCAAuC;AACvC,MAAM,CAAC,KAAK,UAAU,mBAAmB,CACvC,OAAe,EACf,YAAoB,EACpB,IAAqC,EACrC,UAAwD,EAAE,cAAc,EAAE,EAAE,EAAE;IAE9E,MAAM,MAAM,GAAG,MAAM,wBAAwB,CAAC,OAAO,EAAE,YAAY,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;IACpF,OAAO,+BAA+B,CAAC,MAAM,CAAC,CAAC;AACjD,CAAC;AAED,MAAM,UAAU,kBAAkB,CAChC,OAAe,EACf,YAAoB,EACpB,IAAuB,EACvB,UAAkD,EAAE,cAAc,EAAE,EAAE,EAAE;IAExE,OAAO,OAAO,CAAC,IAAI,CAAC,wCAAwC,EAAE,YAAY,CAAC,CAAC,IAAI,iCAC3E,mCAAmC,CAAC,OAAO,CAAC,KAC/C,IAAI,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,EAAE,IACxE,CAAC;AACL,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,yBAAyB,CAC7C,MAA+D;IAE/D,IAAI,YAAY,CAAC,MAAM,CAAC,EAAE,CAAC;QACzB,MAAM,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;IAC1B,CAAC;IAED,OAAO;QACL,IAAI,EAAE,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;YACpC,SAAS,EAAE,CAAC,CAAC,WAAW,CAAC;YACzB,KAAK,EAAE,CAAC,CAAC,OAAO,CAAC;SAClB,CAAC,CAAC;QACH,KAAK,EAAE;YACL,YAAY,EAAE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC;YAChD,WAAW,EAAE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC;SAC/C;KACF,CAAC;AACJ,CAAC;AAED,gDAAgD;AAChD,MAAM,CAAC,KAAK,UAAU,aAAa,CACjC,OAAe,EACf,YAAoB,EACpB,IAAuB,EACvB,UAAkD,EAAE,cAAc,EAAE,EAAE,EAAE;IAExE,MAAM,MAAM,GAAG,MAAM,kBAAkB,CAAC,OAAO,EAAE,YAAY,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;IAC9E,OAAO,yBAAyB,CAAC,MAAM,CAAC,CAAC;AAC3C,CAAC;AAED,MAAM,UAAU,iBAAiB,CAC/B,OAAe,EACf,cAAsB,EACtB,MAAgB,EAChB,UAAiC,EAAE,cAAc,EAAE,EAAE,EAAE;IAEvD,MAAM,EAAE,WAAW,EAAE,UAAU,EAAE,cAAc,EAAE,cAAc,KAAc,OAAO,EAAhB,IAAI,UAAK,OAAO,EAA9E,iEAAoE,CAAU,CAAC;IACrF,MAAM,QAAQ,GAAG,mBAAmB,CAClC,OAAO,EACP,cAAc,gCAEZ,MAAM,IACH,IAAI,KACP,MAAM,EAAE,IAAI,KAEd,EAAE,WAAW,EAAE,UAAU,EAAE,cAAc,EAAE,cAAc,EAAE,CAC5D,CAAC;IACF,OAAO,UAAU,CAAC,QAAQ,EAAE,oBAAoB,CAAC,CAAC;AACpD,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,SAAS,CAC7B,OAAe,EACf,cAAsB,EACtB,MAAc,EACd,UAA4B,EAAE,cAAc,EAAE,EAAE,EAAE;IAElD,MAAM,EAAE,WAAW,EAAE,UAAU,EAAE,cAAc,EAAE,cAAc,KAAc,OAAO,EAAhB,IAAI,UAAK,OAAO,EAA9E,iEAAoE,CAAU,CAAC;IACrF,MAAM,MAAM,GAAG,MAAM,wBAAwB,CAC3C,OAAO,EACP,cAAc,kBACZ,MAAM,IAAK,IAAI,GACjB,EAAE,WAAW,EAAE,UAAU,EAAE,cAAc,EAAE,cAAc,EAAE,CAC5D,CAAC;IACF,OAAO,+BAA+B,CAAC,MAAM,CAAC,CAAC;AACjD,CAAC;AAED,MAAM,UAAU,qBAAqB,CACnC,OAAe,EACf,cAAsB,EACtB,QAA8B,EAC9B,UAAqC,EAAE,cAAc,EAAE,EAAE,EAAE;IAE3D,MAAM,QAAQ,GAAG,wBAAwB,CAAC,OAAO,EAAE,cAAc,EAAE,QAAQ,kCACtE,OAAO,KACV,MAAM,EAAE,IAAI,IACZ,CAAC;IACH,OAAO,UAAU,CAAC,QAAQ,EAAE,wBAAwB,CAAC,CAAC;AACxD,CAAC;AAED;;;;GAIG;AACH,MAAM,CAAC,KAAK,UAAU,kBAAkB,CACtC,OAAe,EACf,cAAsB,EACtB,QAA8B,EAC9B,UAAqC,EAAE,cAAc,EAAE,EAAE,EAAE;IAE3D,MAAM,MAAM,GAAG,MAAM,wBAAwB,CAAC,OAAO,EAAE,cAAc,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;IAC1F,OAAO,8BAA8B,CAAC,MAAM,CAAC,CAAC;AAChD,CAAC;AA+BD,MAAM,CAAC,KAAK,UAAU,mBAAmB,CACvC,OAAe,EACf,cAAsB,EACtB,WAAuB,EACvB,eAAqD,EACrD,YAAyC;IAEzC,MAAM,OAAO,GACX,YAAY,aAAZ,YAAY,cAAZ,YAAY,GAAI,CAAC,OAAO,eAAe,KAAK,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,eAAe,aAAf,eAAe,cAAf,eAAe,GAAI,EAAE,CAAC,CAAC;IACrF,MAAM,eAAe,GAAG,OAAO,eAAe,KAAK,QAAQ,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,SAAS,CAAC;IAC1F,MAAM,EAAE,WAAW,EAAE,UAAU,EAAE,cAAc,EAAE,cAAc,KAAc,OAAO,EAAhB,IAAI,UAAK,OAAO,EAA9E,iEAAoE,CAAU,CAAC;IACrF,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,MAAM,OAAO;SACnC,aAAa,CAAC,iDAAiD,EAAE,cAAc,CAAC;SAChF,IAAI,iCACA,mCAAmC,CAAC;QACrC,WAAW;QACX,UAAU;QACV,cAAc;QACd,cAAc;KACf,CAAC,KACF,WAAW,EAAE,qBAAqB,EAClC,IAAI,gDACC,aAAa,CAAC,IAAI,CAAC,KACtB,IAAI,EAAE,UAAU,CAAC,WAAW,EAAE,iBAAiB,CAAC,KAC7C,CAAC,eAAe,CAAC,CAAC,CAAC,EAAE,eAAe,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,KAEjD,CAAC;IACL,IAAI,MAAM,KAAK,KAAK,EAAE,CAAC;QACrB,MAAM,IAAI,CAAC,KAAK,CAAC;IACnB,CAAC;IAED,OAAO,eAAe,KAAK,cAAc;QACvC,CAAC,CAAC,IAAI;QACN,CAAC,CAAE,aAAa,CAAC,IAAI,CAAoC,CAAC;AAC9D,CAAC;AAgCD,MAAM,CAAC,KAAK,UAAU,qBAAqB,CACzC,OAAe,EACf,cAAsB,EACtB,WAAuB,EACvB,eAAuD,EACvD,YAA2C;IAE3C,MAAM,OAAO,GACX,YAAY,aAAZ,YAAY,cAAZ,YAAY,GAAI,CAAC,OAAO,eAAe,KAAK,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,eAAe,aAAf,eAAe,cAAf,eAAe,GAAI,EAAE,CAAC,CAAC;IACrF,MAAM,eAAe,GAAG,OAAO,eAAe,KAAK,QAAQ,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,SAAS,CAAC;IAC1F,MAAM,EAAE,WAAW,EAAE,UAAU,EAAE,cAAc,EAAE,cAAc,KAAc,OAAO,EAAhB,IAAI,UAAK,OAAO,EAA9E,iEAAoE,CAAU,CAAC;IACrF,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,MAAM,OAAO;SACnC,aAAa,CAAC,mDAAmD,EAAE,cAAc,CAAC;SAClF,IAAI,iCACA,mCAAmC,CAAC;QACrC,WAAW;QACX,UAAU;QACV,cAAc;QACd,cAAc;KACf,CAAC,KACF,WAAW,EAAE,qBAAqB,EAClC,IAAI,gDACC,aAAa,CAAC,IAAI,CAAC,KACtB,IAAI,EAAE,UAAU,CAAC,WAAW,EAAE,iBAAiB,CAAC,KAC7C,CAAC,eAAe,CAAC,CAAC,CAAC,EAAE,eAAe,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,KAEjD,CAAC;IACL,IAAI,MAAM,KAAK,KAAK,EAAE,CAAC;QACrB,MAAM,IAAI,CAAC,KAAK,CAAC;IACnB,CAAC;IAED,OAAO,eAAe,KAAK,cAAc;QACvC,CAAC,CAAC,IAAI;QACN,CAAC,CAAE,aAAa,CAAC,IAAI,CAAoC,CAAC;AAC9D,CAAC;AAED,SAAS,wBAAwB,CAC/B,OAAe,EACf,cAAsB,EACtB,QAA8B,EAC9B,UAA4D,EAAE,cAAc,EAAE,EAAE,EAAE;IAKlF,MAAM,EACJ,qBAAqB,EACrB,WAAW,EACX,UAAU,EACV,cAAc,EACd,cAAc,KAEZ,OAAO,EADN,IAAI,UACL,OAAO,EAPL,0FAOL,CAAU,CAAC;IACZ,MAAM,WAAW,GAAG;QAClB,WAAW;QACX,UAAU;QACV,cAAc;QACd,cAAc;KACf,CAAC;IACF,MAAM,KAAK,mCACN,CAAC,CAAC,CAAA,qBAAqB,aAArB,qBAAqB,uBAArB,qBAAqB,CAAE,UAAU,CAAA;QACpC,CAAC,CAAC,EAAE;QACJ,CAAC,CAAC,EAAE,WAAW,EAAE,qBAAqB,CAAC,UAAU,EAAE,CAAC,GACnD,CAAC,CAAC,CAAA,qBAAqB,aAArB,qBAAqB,uBAArB,qBAAqB,CAAE,YAAY,CAAA;QACtC,CAAC,CAAC,EAAE;QACJ,CAAC,CAAC,EAAE,YAAY,EAAE,qBAAqB,CAAC,YAAY,EAAE,CAAC,CAC1D,CAAC;IACF,OAAO,KAAK,CAAC,WAAW,IAAI,KAAK,CAAC,YAAY;QAC5C,CAAC,CAAC,0CAA0C,CACxC,OAAO,EACP,cAAc,gCAEZ,QAAQ,IACL,IAAI,GACJ,KAAK,GAEV,WAAW,CACZ;QACH,CAAC,CAAC,uBAAuB,CAAC,OAAO,EAAE,cAAc,kBAAI,QAAQ,IAAK,IAAI,GAAI,WAAW,CAAC,CAAC;AAC3F,CAAC;AAED,SAAS,0CAA0C,CACjD,OAAe,EACf,cAAsB,EACtB,IAAqC,EACrC,UAAuD,EAAE,cAAc,EAAE,EAAE,EAAE;IAK7E,MAAM,EAAE,SAAS,EAAE,YAAY,EAAE,QAAQ,EAAE,WAAW,KAAc,IAAI,EAAb,IAAI,UAAK,IAAI,EAAlE,wDAA2D,CAAO,CAAC;IACzE,OAAO,OAAO;SACX,IAAI,CAAC,yDAAyD,EAAE,cAAc,CAAC;SAC/E,IAAI,iCACA,mCAAmC,CAAC,OAAO,CAAC,KAC/C,IAAI,kCACC,aAAa,CAAC,IAAI,CAAC,KACtB,WAAW,EAAE,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,GAAG,CAC3B,CAAC,EAAiB,EAAE,EAAE;oBAArB,EAAE,IAAI,OAAW,EAAN,IAAI,cAAf,QAAiB,CAAF;gBAAO,OAAA,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE,CAAoC,CAAA;aAAA,CACvF,EACD,SAAS,EACT,aAAa,EAAE,YAAY,EAC3B,QAAQ,EAAE,QAAQ,CAAC,GAAG,CAAC,2BAA2B,CAAC,OAErD,CAAC;AACP,CAAC;AAED,SAAS,2BAA2B,CAAC,OAA2B;IAC9D,IAAI,OAAO,CAAC,OAAO,KAAK,SAAS,EAAE,CAAC;QAClC,OAAO,CAAC,OAAO,GAAG,IAAI,CAAC;IACzB,CAAC;IACD,QAAQ,OAAO,CAAC,IAAI,EAAE,CAAC;QACrB,KAAK,WAAW,CAAC,CAAC,CAAC;YACjB,MAAM,EAAE,YAAY,EAAE,SAAS,KAAc,OAAO,EAAhB,IAAI,UAAK,OAAO,EAA9C,6BAAoC,CAAU,CAAC;YACrD,qDACK,aAAa,CAAC,IAAI,CAAC,GACnB,CAAC,CAAC,SAAS,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,UAAU,EAAE,SAAS,EAAE,CAAC,GACvE,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE,aAAa,EAAE,YAAY,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EACxD;QACJ,CAAC;QACD,OAAO,CAAC,CAAC,CAAC;YACR,OAAO,aAAa,CAAC,OAAO,CAAC,CAAC;QAChC,CAAC;IACH,CAAC;AACH,CAAC;AAED,SAAS,uBAAuB,CAC9B,OAAe,EACf,cAAsB,EACtB,IAAqC,EACrC,UAAuD,EAAE,cAAc,EAAE,EAAE,EAAE;IAE7E,MAAM,EAAE,SAAS,EAAE,YAAY,EAAE,QAAQ,KAAc,IAAI,EAAb,IAAI,UAAK,IAAI,EAArD,yCAA8C,CAAO,CAAC;IAC5D,OAAO,OAAO,CAAC,IAAI,CAAC,8CAA8C,EAAE,cAAc,CAAC,CAAC,IAAI,iCACnF,mCAAmC,CAAC,OAAO,CAAC,KAC/C,IAAI,kCACC,aAAa,CAAC,IAAI,CAAC,KACtB,SAAS,EACT,aAAa,EAAE,YAAY,EAC3B,QAAQ,EAAE,QAAQ,CAAC,GAAG,CAAC,2BAA2B,CAAC,OAErD,CAAC;AACL,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,iDAAiD;IACrE,OAAO,EAAS,CAAC;AACnB,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,qCAAqC,CACzD,QAAgB,EAChB,aAAqB,EACrB,KAA6B,EAC7B,WAA2E,EAAE;IAE7E,OAAO,EAAS,CAAC;AACnB,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * THIS IS AN AUTO-GENERATED FILE - DO NOT EDIT!\n *\n * Any changes you make here may be lost.\n *\n * If you need to make changes, please do so in the original source file, \\{project-root\\}/sources/custom\n */\n\nimport { StreamableMethod, operationOptionsToRequestParameters } from \"@azure-rest/core-client\";\nimport { createFile } from \"@azure/core-rest-pipeline\";\nimport { uint8ArrayToString } from \"@azure/core-util\";\nimport {\n  AudioResult,\n  AudioResultFormat,\n  AudioResultSimpleJson,\n  GetAudioTranscriptionOptions,\n  GetAudioTranslationOptions,\n} from \"../../../models/audio.js\";\nimport {\n  AudioTranscription,\n  AudioTranscriptionOptions,\n  AudioTranslation,\n  AudioTranslationOptions,\n  ChatCompletions,\n  ChatCompletionsOptions,\n  ChatRequestMessage,\n  Completions,\n  CompletionsOptions,\n  Embeddings,\n  EmbeddingsOptions,\n  EventStream,\n  ImageGenerations,\n} from \"../../../models/models.js\";\nimport {\n  ClientOpenAIClientGetAudioTranscriptionAsPlainTextOptions,\n  ClientOpenAIClientGetAudioTranscriptionAsResponseObjectOptions,\n  ClientOpenAIClientGetAudioTranslationAsPlainTextOptions,\n  ClientOpenAIClientGetAudioTranslationAsResponseObjectOptions,\n  ClientOpenAIClientGetChatCompletionsOptions,\n  ClientOpenAIClientGetChatCompletionsWithAzureExtensionsOptions,\n  ClientOpenAIClientGetCompletionsOptions,\n  ClientOpenAIClientGetEmbeddingsOptions,\n  ClientOpenAIClientGetImageGenerationsOptions,\n  GetChatCompletionsOptions,\n  GetCompletionsOptions,\n  GetImagesOptions,\n} from \"../../../models/options.js\";\nimport {\n  AzureChatExtensionConfiguration,\n  OpenAIContext as Client,\n  GetAudioTranscriptionAsPlainText200Response,\n  GetAudioTranscriptionAsPlainTextDefaultResponse,\n  GetAudioTranscriptionAsResponseObject200Response,\n  GetAudioTranscriptionAsResponseObjectDefaultResponse,\n  GetAudioTranslationAsPlainText200Response,\n  GetAudioTranslationAsPlainTextDefaultResponse,\n  GetAudioTranslationAsResponseObject200Response,\n  GetAudioTranslationAsResponseObjectDefaultResponse,\n  GetChatCompletions200Response,\n  GetChatCompletionsDefaultResponse,\n  GetChatCompletionsWithAzureExtensions200Response,\n  GetChatCompletionsWithAzureExtensionsDefaultResponse,\n  GetCompletions200Response,\n  GetCompletionsDefaultResponse,\n  GetEmbeddings200Response,\n  GetEmbeddingsDefaultResponse,\n  GetImageGenerations200Response,\n  GetImageGenerationsDefaultResponse,\n  isUnexpected,\n  ChatRequestMessage as RestChatRequestMessage,\n} from \"../../../rest/index.js\";\nimport { getOaiSSEs } from \"../../oaiSse.js\";\nimport { camelCaseKeys, snakeCaseKeys } from \"../../util.js\";\nimport { getChatCompletionsResult, getCompletionsResult } from \"./deserializers.js\";\nimport {\n  ChatCompletionsOptions as GeneratedChatCompletionsOptions,\n  ImageGenerationOptions as GeneratedImageGenerationOptions,\n} from \"../../../models/models.js\";\n\nexport function _getAudioTranscriptionAsPlainTextSend(\n  context: Client,\n  deploymentId: string,\n  body: AudioTranscriptionOptions,\n  options: ClientOpenAIClientGetAudioTranscriptionAsPlainTextOptions = {\n    requestOptions: {},\n  },\n): StreamableMethod<\n  GetAudioTranscriptionAsPlainText200Response | GetAudioTranscriptionAsPlainTextDefaultResponse\n> {\n  return context.path(\"/deployments/{deploymentId}/audio/transcriptions\", deploymentId).post({\n    ...operationOptionsToRequestParameters(options),\n    body: {\n      file: uint8ArrayToString(body[\"file\"], \"base64\"),\n      filename: body[\"filename\"],\n      response_format: body[\"responseFormat\"],\n      language: body[\"language\"],\n      prompt: body[\"prompt\"],\n      temperature: body[\"temperature\"],\n      model: body[\"model\"],\n    },\n  }) as StreamableMethod<\n    GetAudioTranscriptionAsPlainText200Response | GetAudioTranscriptionAsPlainTextDefaultResponse\n  >;\n}\n\nexport async function _getAudioTranscriptionAsPlainTextDeserialize(\n  result:\n    | GetAudioTranscriptionAsPlainText200Response\n    | GetAudioTranscriptionAsPlainTextDefaultResponse,\n): Promise<string> {\n  if (isUnexpected(result)) {\n    throw result.body;\n  }\n\n  return result.body;\n}\n\n/**\n * Gets transcribed text and associated metadata from provided spoken audio data. Audio will be transcribed in the\n * written language corresponding to the language it was spoken in.\n */\nexport async function getAudioTranscriptionAsPlainText(\n  context: Client,\n  deploymentId: string,\n  body: AudioTranscriptionOptions,\n  options: ClientOpenAIClientGetAudioTranscriptionAsPlainTextOptions = {\n    requestOptions: {},\n  },\n): Promise<string> {\n  const result = await _getAudioTranscriptionAsPlainTextSend(context, deploymentId, body, options);\n  return _getAudioTranscriptionAsPlainTextDeserialize(result);\n}\n\nexport function _getAudioTranscriptionAsResponseObjectSend(\n  context: Client,\n  deploymentId: string,\n  body: AudioTranscriptionOptions,\n  options: ClientOpenAIClientGetAudioTranscriptionAsResponseObjectOptions = {\n    requestOptions: {},\n  },\n): StreamableMethod<\n  | GetAudioTranscriptionAsResponseObject200Response\n  | GetAudioTranscriptionAsResponseObjectDefaultResponse\n> {\n  return context.path(\"/deployments/{deploymentId}/audio/transcriptions\", deploymentId).post({\n    ...operationOptionsToRequestParameters(options),\n    contentType: (options.contentType as any) ?? \"multipart/form-data\",\n    body: {\n      file: uint8ArrayToString(body[\"file\"], \"base64\"),\n      filename: body[\"filename\"],\n      response_format: body[\"responseFormat\"],\n      language: body[\"language\"],\n      prompt: body[\"prompt\"],\n      temperature: body[\"temperature\"],\n      model: body[\"model\"],\n    },\n  }) as StreamableMethod<\n    | GetAudioTranscriptionAsResponseObject200Response\n    | GetAudioTranscriptionAsResponseObjectDefaultResponse\n  >;\n}\n\nexport async function _getAudioTranscriptionAsResponseObjectDeserialize(\n  result:\n    | GetAudioTranscriptionAsResponseObject200Response\n    | GetAudioTranscriptionAsResponseObjectDefaultResponse,\n): Promise<AudioTranscription> {\n  if (isUnexpected(result)) {\n    throw result.body;\n  }\n\n  return {\n    text: result.body[\"text\"],\n    task: result.body[\"task\"],\n    language: result.body[\"language\"],\n    duration: result.body[\"duration\"],\n    segments: !result.body[\"segments\"]\n      ? result.body[\"segments\"]\n      : result.body[\"segments\"].map((p) => ({\n          id: p[\"id\"],\n          start: p[\"start\"],\n          end: p[\"end\"],\n          text: p[\"text\"],\n          temperature: p[\"temperature\"],\n          avgLogprob: p[\"avg_logprob\"],\n          compressionRatio: p[\"compression_ratio\"],\n          noSpeechProb: p[\"no_speech_prob\"],\n          tokens: p[\"tokens\"],\n          seek: p[\"seek\"],\n        })),\n  };\n}\n\n/**\n * Gets transcribed text and associated metadata from provided spoken audio data. Audio will be transcribed in the\n * written language corresponding to the language it was spoken in.\n */\nexport async function getAudioTranscriptionAsResponseObject(\n  context: Client,\n  deploymentId: string,\n  body: AudioTranscriptionOptions,\n  options: ClientOpenAIClientGetAudioTranscriptionAsResponseObjectOptions = {\n    requestOptions: {},\n  },\n): Promise<AudioTranscription> {\n  const result = await _getAudioTranscriptionAsResponseObjectSend(\n    context,\n    deploymentId,\n    body,\n    options,\n  );\n  return _getAudioTranscriptionAsResponseObjectDeserialize(result);\n}\n\nexport function _getAudioTranslationAsPlainTextSend(\n  context: Client,\n  deploymentId: string,\n  body: AudioTranslationOptions,\n  options: ClientOpenAIClientGetAudioTranslationAsPlainTextOptions = {\n    requestOptions: {},\n  },\n): StreamableMethod<\n  GetAudioTranslationAsPlainText200Response | GetAudioTranslationAsPlainTextDefaultResponse\n> {\n  return context.path(\"/deployments/{deploymentId}/audio/translations\", deploymentId).post({\n    ...operationOptionsToRequestParameters(options),\n    body: {\n      file: uint8ArrayToString(body[\"file\"], \"base64\"),\n      filename: body[\"filename\"],\n      response_format: body[\"responseFormat\"],\n      prompt: body[\"prompt\"],\n      temperature: body[\"temperature\"],\n      model: body[\"model\"],\n    },\n  }) as StreamableMethod<\n    GetAudioTranslationAsPlainText200Response | GetAudioTranslationAsPlainTextDefaultResponse\n  >;\n}\n\nexport async function _getAudioTranslationAsPlainTextDeserialize(\n  result: GetAudioTranslationAsPlainText200Response | GetAudioTranslationAsPlainTextDefaultResponse,\n): Promise<string> {\n  if (isUnexpected(result)) {\n    throw result.body;\n  }\n\n  return result.body;\n}\n\n/** Gets English language transcribed text and associated metadata from provided spoken audio data. */\nexport async function getAudioTranslationAsPlainText(\n  context: Client,\n  deploymentId: string,\n  body: AudioTranslationOptions,\n  options: ClientOpenAIClientGetAudioTranslationAsPlainTextOptions = {\n    requestOptions: {},\n  },\n): Promise<string> {\n  const result = await _getAudioTranslationAsPlainTextSend(context, deploymentId, body, options);\n  return _getAudioTranslationAsPlainTextDeserialize(result);\n}\n\nexport function _getAudioTranslationAsResponseObjectSend(\n  context: Client,\n  deploymentId: string,\n  body: AudioTranslationOptions,\n  options: ClientOpenAIClientGetAudioTranslationAsResponseObjectOptions = {\n    requestOptions: {},\n  },\n): StreamableMethod<\n  | GetAudioTranslationAsResponseObject200Response\n  | GetAudioTranslationAsResponseObjectDefaultResponse\n> {\n  return context.path(\"/deployments/{deploymentId}/audio/translations\", deploymentId).post({\n    ...operationOptionsToRequestParameters(options),\n    contentType: (options.contentType as any) ?? \"multipart/form-data\",\n    body: {\n      file: uint8ArrayToString(body[\"file\"], \"base64\"),\n      filename: body[\"filename\"],\n      response_format: body[\"responseFormat\"],\n      prompt: body[\"prompt\"],\n      temperature: body[\"temperature\"],\n      model: body[\"model\"],\n    },\n  }) as StreamableMethod<\n    | GetAudioTranslationAsResponseObject200Response\n    | GetAudioTranslationAsResponseObjectDefaultResponse\n  >;\n}\n\nexport async function _getAudioTranslationAsResponseObjectDeserialize(\n  result:\n    | GetAudioTranslationAsResponseObject200Response\n    | GetAudioTranslationAsResponseObjectDefaultResponse,\n): Promise<AudioTranslation> {\n  if (isUnexpected(result)) {\n    throw result.body;\n  }\n\n  return {\n    text: result.body[\"text\"],\n    task: result.body[\"task\"],\n    language: result.body[\"language\"],\n    duration: result.body[\"duration\"],\n    segments: !result.body[\"segments\"]\n      ? result.body[\"segments\"]\n      : result.body[\"segments\"].map((p) => ({\n          id: p[\"id\"],\n          start: p[\"start\"],\n          end: p[\"end\"],\n          text: p[\"text\"],\n          temperature: p[\"temperature\"],\n          avgLogprob: p[\"avg_logprob\"],\n          compressionRatio: p[\"compression_ratio\"],\n          noSpeechProb: p[\"no_speech_prob\"],\n          tokens: p[\"tokens\"],\n          seek: p[\"seek\"],\n        })),\n  };\n}\n\n/** Gets English language transcribed text and associated metadata from provided spoken audio data. */\nexport async function getAudioTranslationAsResponseObject(\n  context: Client,\n  deploymentId: string,\n  body: AudioTranslationOptions,\n  options: ClientOpenAIClientGetAudioTranslationAsResponseObjectOptions = {\n    requestOptions: {},\n  },\n): Promise<AudioTranslation> {\n  const result = await _getAudioTranslationAsResponseObjectSend(\n    context,\n    deploymentId,\n    body,\n    options,\n  );\n  return _getAudioTranslationAsResponseObjectDeserialize(result);\n}\n\nexport function _getCompletionsSend(\n  context: Client,\n  deploymentId: string,\n  body: CompletionsOptions,\n  options: ClientOpenAIClientGetCompletionsOptions = { requestOptions: {} },\n): StreamableMethod<GetCompletions200Response | GetCompletionsDefaultResponse> {\n  return context.path(\"/deployments/{deploymentId}/completions\", deploymentId).post({\n    ...operationOptionsToRequestParameters(options),\n    body: {\n      prompt: body[\"prompt\"],\n      max_tokens: body[\"maxTokens\"],\n      temperature: body[\"temperature\"],\n      top_p: body[\"topP\"],\n      logit_bias: body[\"logitBias\"],\n      user: body[\"user\"],\n      n: body[\"n\"],\n      logprobs: body[\"logprobs\"],\n      echo: body[\"echo\"],\n      stop: body[\"stop\"],\n      presence_penalty: body[\"presencePenalty\"],\n      frequency_penalty: body[\"frequencyPenalty\"],\n      best_of: body[\"bestOf\"],\n      stream: body[\"stream\"],\n      model: body[\"model\"],\n    },\n  });\n}\n\n/**\n * Gets completions for the provided input prompts.\n * Completions support a wide variety of tasks and generate text that continues from or \"completes\"\n * provided prompt data.\n */\nexport async function getCompletions(\n  context: Client,\n  deploymentName: string,\n  prompt: string[],\n  options: GetCompletionsOptions = { requestOptions: {} },\n): Promise<Completions> {\n  const { abortSignal, onResponse, requestOptions, tracingOptions, ...rest } = options;\n  const response = await _getCompletionsSend(\n    context,\n    deploymentName,\n    {\n      prompt,\n      ...rest,\n    },\n    { abortSignal, onResponse, requestOptions, tracingOptions },\n  );\n  return _getCompletionsDeserialize(response);\n}\n\nexport async function _getCompletionsDeserialize(\n  result: GetCompletions200Response | GetCompletionsDefaultResponse,\n): Promise<Completions> {\n  if (isUnexpected(result)) {\n    throw result.body.error;\n  }\n  return getCompletionsResult(result.body);\n}\n\nexport async function _getChatCompletionsDeserialize(\n  result: GetChatCompletions200Response | GetChatCompletionsDefaultResponse,\n): Promise<ChatCompletions> {\n  if (isUnexpected(result)) {\n    throw result.body.error;\n  }\n  return getChatCompletionsResult(result.body);\n}\n\nexport function _getImageGenerationsSend(\n  context: Client,\n  deploymentId: string,\n  body: GeneratedImageGenerationOptions,\n  options: ClientOpenAIClientGetImageGenerationsOptions = { requestOptions: {} },\n): StreamableMethod<GetImageGenerations200Response | GetImageGenerationsDefaultResponse> {\n  return context.path(\"/deployments/{deploymentId}/images/generations\", deploymentId).post({\n    ...operationOptionsToRequestParameters(options),\n    body: {\n      model: body[\"model\"],\n      prompt: body[\"prompt\"],\n      n: body[\"n\"],\n      size: body[\"size\"],\n      response_format: body[\"responseFormat\"],\n      quality: body[\"quality\"],\n      style: body[\"style\"],\n      user: body[\"user\"],\n    },\n  });\n}\n\nexport async function _getImageGenerationsDeserialize(\n  result: GetImageGenerations200Response | GetImageGenerationsDefaultResponse,\n): Promise<ImageGenerations> {\n  if (isUnexpected(result)) {\n    throw result.body.error;\n  }\n\n  return {\n    created: new Date(result.body[\"created\"]),\n    data: result.body[\"data\"].map((p) => ({\n      url: p[\"url\"],\n      base64Data: p[\"b64_json\"],\n      revisedPrompt: p[\"revised_prompt\"],\n    })),\n  };\n}\n\n/** Creates an image given a prompt. */\nexport async function getImageGenerations(\n  context: Client,\n  deploymentId: string,\n  body: GeneratedImageGenerationOptions,\n  options: ClientOpenAIClientGetImageGenerationsOptions = { requestOptions: {} },\n): Promise<ImageGenerations> {\n  const result = await _getImageGenerationsSend(context, deploymentId, body, options);\n  return _getImageGenerationsDeserialize(result);\n}\n\nexport function _getEmbeddingsSend(\n  context: Client,\n  deploymentId: string,\n  body: EmbeddingsOptions,\n  options: ClientOpenAIClientGetEmbeddingsOptions = { requestOptions: {} },\n): StreamableMethod<GetEmbeddings200Response | GetEmbeddingsDefaultResponse> {\n  return context.path(\"/deployments/{deploymentId}/embeddings\", deploymentId).post({\n    ...operationOptionsToRequestParameters(options),\n    body: { user: body[\"user\"], model: body[\"model\"], input: body[\"input\"] },\n  });\n}\n\nexport async function _getEmbeddingsDeserialize(\n  result: GetEmbeddings200Response | GetEmbeddingsDefaultResponse,\n): Promise<Embeddings> {\n  if (isUnexpected(result)) {\n    throw result.body.error;\n  }\n\n  return {\n    data: result.body[\"data\"].map((p) => ({\n      embedding: p[\"embedding\"],\n      index: p[\"index\"],\n    })),\n    usage: {\n      promptTokens: result.body.usage[\"prompt_tokens\"],\n      totalTokens: result.body.usage[\"total_tokens\"],\n    },\n  };\n}\n\n/** Return the embeddings for a given prompt. */\nexport async function getEmbeddings(\n  context: Client,\n  deploymentId: string,\n  body: EmbeddingsOptions,\n  options: ClientOpenAIClientGetEmbeddingsOptions = { requestOptions: {} },\n): Promise<Embeddings> {\n  const result = await _getEmbeddingsSend(context, deploymentId, body, options);\n  return _getEmbeddingsDeserialize(result);\n}\n\nexport function streamCompletions(\n  context: Client,\n  deploymentName: string,\n  prompt: string[],\n  options: GetCompletionsOptions = { requestOptions: {} },\n): Promise<EventStream<Omit<Completions, \"usage\">>> {\n  const { abortSignal, onResponse, requestOptions, tracingOptions, ...rest } = options;\n  const response = _getCompletionsSend(\n    context,\n    deploymentName,\n    {\n      prompt,\n      ...rest,\n      stream: true,\n    },\n    { abortSignal, onResponse, requestOptions, tracingOptions },\n  );\n  return getOaiSSEs(response, getCompletionsResult);\n}\n\nexport async function getImages(\n  context: Client,\n  deploymentName: string,\n  prompt: string,\n  options: GetImagesOptions = { requestOptions: {} },\n): Promise<ImageGenerations> {\n  const { abortSignal, onResponse, requestOptions, tracingOptions, ...rest } = options;\n  const result = await _getImageGenerationsSend(\n    context,\n    deploymentName,\n    { prompt, ...rest },\n    { abortSignal, onResponse, requestOptions, tracingOptions },\n  );\n  return _getImageGenerationsDeserialize(result);\n}\n\nexport function streamChatCompletions(\n  context: Client,\n  deploymentName: string,\n  messages: ChatRequestMessage[],\n  options: GetChatCompletionsOptions = { requestOptions: {} },\n): Promise<EventStream<ChatCompletions>> {\n  const response = _getChatCompletionsSendX(context, deploymentName, messages, {\n    ...options,\n    stream: true,\n  });\n  return getOaiSSEs(response, getChatCompletionsResult);\n}\n\n/**\n * Gets chat completions for the provided chat messages.\n * Completions support a wide variety of tasks and generate text that continues from or \"completes\"\n * provided prompt data.\n */\nexport async function getChatCompletions(\n  context: Client,\n  deploymentName: string,\n  messages: ChatRequestMessage[],\n  options: GetChatCompletionsOptions = { requestOptions: {} },\n): Promise<ChatCompletions> {\n  const result = await _getChatCompletionsSendX(context, deploymentName, messages, options);\n  return _getChatCompletionsDeserialize(result);\n}\n/**\n * Returns the translation of an audio file.\n * @param context - The context containing the client to use for this request.\n * @param deploymentName - The name of the model deployment (when using Azure OpenAI) or model name (when using non-Azure OpenAI) to use for this request.\n * @param fileContent - The content of the audio file to translate.\n * @param options - The options for this audio translation request.\n * @returns The audio translation result.\n */\nexport async function getAudioTranslation(\n  context: Client,\n  deploymentName: string,\n  fileContent: Uint8Array,\n  options?: GetAudioTranslationOptions,\n): Promise<AudioResultSimpleJson>;\n/**\n * Returns the translation of an audio file.\n * @param context - The context containing the client to use for this request.\n * @param deploymentName - The name of the model deployment (when using Azure OpenAI) or model name (when using non-Azure OpenAI) to use for this request.\n * @param fileContent - The content of the audio file to translate.\n * @param format - The format of the result object. See {@link AudioResultFormat} for possible values.\n * @param options - The options for this audio translation request.\n * @returns The audio translation result.\n */\nexport async function getAudioTranslation<Format extends AudioResultFormat>(\n  context: Client,\n  deploymentName: string,\n  fileContent: Uint8Array,\n  format: Format,\n  options?: GetAudioTranslationOptions,\n): Promise<AudioResult<Format>>;\nexport async function getAudioTranslation<Format extends AudioResultFormat>(\n  context: Client,\n  deploymentName: string,\n  fileContent: Uint8Array,\n  formatOrOptions?: Format | GetAudioTranslationOptions,\n  inputOptions?: GetAudioTranslationOptions,\n): Promise<AudioResult<Format>> {\n  const options =\n    inputOptions ?? (typeof formatOrOptions === \"string\" ? {} : formatOrOptions ?? {});\n  const response_format = typeof formatOrOptions === \"string\" ? formatOrOptions : undefined;\n  const { abortSignal, onResponse, requestOptions, tracingOptions, ...rest } = options;\n  const { body, status } = await context\n    .pathUnchecked(\"deployments/{deploymentName}/audio/translations\", deploymentName)\n    .post({\n      ...operationOptionsToRequestParameters({\n        abortSignal,\n        onResponse,\n        tracingOptions,\n        requestOptions,\n      }),\n      contentType: \"multipart/form-data\",\n      body: {\n        ...snakeCaseKeys(rest),\n        file: createFile(fileContent, \"placeholder.wav\"),\n        ...(response_format ? { response_format } : {}),\n      },\n    });\n  if (status !== \"200\") {\n    throw body.error;\n  }\n\n  return response_format !== \"verbose_json\"\n    ? body\n    : (camelCaseKeys(body) as unknown as AudioResult<Format>);\n}\n\n/**\n * Returns the transcription of an audio file in a simple JSON format.\n * @param context - The context containing the client to use for this request.\n * @param deploymentName - The name of the model deployment (when using Azure OpenAI) or model name (when using non-Azure OpenAI) to use for this request.\n * @param fileContent - The content of the audio file to transcribe.\n * @param options - The options for this audio transcription request.\n * @returns The audio transcription result in a simple JSON format.\n */\nexport async function getAudioTranscription(\n  context: Client,\n  deploymentName: string,\n  fileContent: Uint8Array,\n  options?: GetAudioTranscriptionOptions,\n): Promise<AudioResultSimpleJson>;\n/**\n * Returns the transcription of an audio file.\n * @param context - The context containing the client to use for this request.\n * @param deploymentName - The name of the model deployment (when using Azure OpenAI) or model name (when using non-Azure OpenAI) to use for this request.\n * @param fileContent - The content of the audio file to transcribe.\n * @param format - The format of the result object. See {@link AudioResultFormat} for possible values.\n * @param options - The options for this audio transcription request.\n * @returns The audio transcription result in a format of your choice.\n */\nexport async function getAudioTranscription<Format extends AudioResultFormat>(\n  context: Client,\n  deploymentName: string,\n  fileContent: Uint8Array,\n  format: Format,\n  options?: GetAudioTranscriptionOptions,\n): Promise<AudioResult<Format>>;\nexport async function getAudioTranscription<Format extends AudioResultFormat>(\n  context: Client,\n  deploymentName: string,\n  fileContent: Uint8Array,\n  formatOrOptions?: Format | GetAudioTranscriptionOptions,\n  inputOptions?: GetAudioTranscriptionOptions,\n): Promise<AudioResult<Format>> {\n  const options =\n    inputOptions ?? (typeof formatOrOptions === \"string\" ? {} : formatOrOptions ?? {});\n  const response_format = typeof formatOrOptions === \"string\" ? formatOrOptions : undefined;\n  const { abortSignal, onResponse, requestOptions, tracingOptions, ...rest } = options;\n  const { body, status } = await context\n    .pathUnchecked(\"deployments/{deploymentName}/audio/transcriptions\", deploymentName)\n    .post({\n      ...operationOptionsToRequestParameters({\n        abortSignal,\n        onResponse,\n        tracingOptions,\n        requestOptions,\n      }),\n      contentType: \"multipart/form-data\",\n      body: {\n        ...snakeCaseKeys(rest),\n        file: createFile(fileContent, \"placeholder.wav\"),\n        ...(response_format ? { response_format } : {}),\n      },\n    });\n  if (status !== \"200\") {\n    throw body.error;\n  }\n\n  return response_format !== \"verbose_json\"\n    ? body\n    : (camelCaseKeys(body) as unknown as AudioResult<Format>);\n}\n\nfunction _getChatCompletionsSendX(\n  context: Client,\n  deploymentName: string,\n  messages: ChatRequestMessage[],\n  options: GetChatCompletionsOptions & { stream?: boolean } = { requestOptions: {} },\n): StreamableMethod<\n  | GetChatCompletionsWithAzureExtensions200Response\n  | GetChatCompletionsWithAzureExtensionsDefaultResponse\n> {\n  const {\n    azureExtensionOptions,\n    abortSignal,\n    onResponse,\n    requestOptions,\n    tracingOptions,\n    ...rest\n  } = options;\n  const coreOptions = {\n    abortSignal,\n    onResponse,\n    requestOptions,\n    tracingOptions,\n  };\n  const azure = {\n    ...(!azureExtensionOptions?.extensions\n      ? {}\n      : { dataSources: azureExtensionOptions.extensions }),\n    ...(!azureExtensionOptions?.enhancements\n      ? {}\n      : { enhancements: azureExtensionOptions.enhancements }),\n  };\n  return azure.dataSources || azure.enhancements\n    ? _getChatCompletionsWithAzureExtensionsSend(\n        context,\n        deploymentName,\n        {\n          messages,\n          ...rest,\n          ...azure,\n        },\n        coreOptions,\n      )\n    : _getChatCompletionsSend(context, deploymentName, { messages, ...rest }, coreOptions);\n}\n\nfunction _getChatCompletionsWithAzureExtensionsSend(\n  context: Client,\n  deploymentName: string,\n  body: GeneratedChatCompletionsOptions,\n  options: ClientOpenAIClientGetChatCompletionsOptions = { requestOptions: {} },\n): StreamableMethod<\n  | GetChatCompletionsWithAzureExtensions200Response\n  | GetChatCompletionsWithAzureExtensionsDefaultResponse\n> {\n  const { functions, functionCall, messages, dataSources, ...rest } = body;\n  return context\n    .path(\"/deployments/{deploymentId}/extensions/chat/completions\", deploymentName)\n    .post({\n      ...operationOptionsToRequestParameters(options),\n      body: {\n        ...snakeCaseKeys(rest),\n        dataSources: dataSources?.map(\n          ({ type, ...opts }) => ({ type, parameters: opts }) as AzureChatExtensionConfiguration,\n        ),\n        functions,\n        function_call: functionCall,\n        messages: messages.map(serializeChatRequestMessage),\n      },\n    });\n}\n\nfunction serializeChatRequestMessage(message: ChatRequestMessage): RestChatRequestMessage {\n  if (message.content === undefined) {\n    message.content = null;\n  }\n  switch (message.role) {\n    case \"assistant\": {\n      const { functionCall, toolCalls, ...rest } = message;\n      return {\n        ...snakeCaseKeys(rest),\n        ...(!toolCalls || toolCalls.length === 0 ? {} : { tool_calls: toolCalls }),\n        ...(functionCall ? { function_call: functionCall } : {}),\n      };\n    }\n    default: {\n      return snakeCaseKeys(message);\n    }\n  }\n}\n\nfunction _getChatCompletionsSend(\n  context: Client,\n  deploymentName: string,\n  body: GeneratedChatCompletionsOptions,\n  options: ClientOpenAIClientGetChatCompletionsOptions = { requestOptions: {} },\n): StreamableMethod<GetChatCompletions200Response | GetChatCompletionsDefaultResponse> {\n  const { functions, functionCall, messages, ...rest } = body;\n  return context.path(\"/deployments/{deploymentId}/chat/completions\", deploymentName).post({\n    ...operationOptionsToRequestParameters(options),\n    body: {\n      ...snakeCaseKeys(rest),\n      functions,\n      function_call: functionCall,\n      messages: messages.map(serializeChatRequestMessage),\n    },\n  });\n}\n\nexport async function _getChatCompletionsWithAzureExtensionsDeserialize(): Promise<any> {\n  return {} as any;\n}\n\nexport async function getChatCompletionsWithAzureExtensions(\n  _context: Client,\n  _deploymentId: string,\n  _body: ChatCompletionsOptions,\n  _options: ClientOpenAIClientGetChatCompletionsWithAzureExtensionsOptions = {},\n): Promise<ChatCompletions> {\n  return {} as any;\n}\n"]}
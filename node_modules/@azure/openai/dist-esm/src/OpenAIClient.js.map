{"version":3,"file":"OpenAIClient.js","sourceRoot":"","sources":["../../src/OpenAIClient.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * THIS IS AN AUTO-GENERATED FILE - DO NOT EDIT!\n *\n * Any changes you make here may be lost.\n *\n * If you need to make changes, please do so in the original source file, \\{project-root\\}/sources/custom\n */\n\nimport { KeyCredential, TokenCredential, isTokenCredential } from \"@azure/core-auth\";\nimport {\n  getAudioTranscription,\n  getAudioTranslation,\n  getImages,\n  streamChatCompletions,\n  streamCompletions,\n} from \"./api/index.js\";\nimport {\n  getChatCompletions,\n  getCompletions,\n  getEmbeddings,\n} from \"./api/client/openAIClient/index.js\";\nimport { OpenAIClientOptions, OpenAIContext, createOpenAI } from \"./api/index.js\";\nimport { nonAzurePolicy } from \"./api/policies/nonAzure.js\";\nimport {\n  AudioResult,\n  AudioResultFormat,\n  AudioResultSimpleJson,\n  GetAudioTranscriptionOptions,\n  GetAudioTranslationOptions,\n} from \"./models/audio.js\";\nimport {\n  GetImagesOptions,\n  GetCompletionsOptions,\n  GetEmbeddingsOptions,\n  GetChatCompletionsOptions,\n} from \"./models/options.js\";\nimport {\n  ChatCompletions,\n  ChatRequestMessage,\n  Completions,\n  Embeddings,\n  EventStream,\n  ImageGenerations,\n} from \"./models/models.js\";\n\nexport { OpenAIClientOptions } from \"./api/OpenAIContext.js\";\n\n/**\n * A client for interacting with Azure OpenAI.\n *\n * The client needs the endpoint of an OpenAI resource and an authentication\n * method such as an API key or token. The API key and endpoint can be found in\n * the OpenAI resource page. They will be located in the resource's Keys and Endpoint page.\n *\n * ### Examples for authentication:\n *\n * #### API Key\n *\n * ```js\n * import { OpenAIClient } from \"@azure/openai\";\n * import { AzureKeyCredential } from \"@azure/core-auth\";\n *\n * const endpoint = \"<azure endpoint>\";\n * const credential = new AzureKeyCredential(\"<api key>\");\n *\n * const client = new OpenAIClient(endpoint, credential);\n * ```\n *\n * #### Azure Active Directory\n *\n * ```js\n * import { OpenAIClient } from \"@azure/openai\";\n * import { DefaultAzureCredential } from \"@azure/identity\";\n *\n * const endpoint = \"<azure endpoint>\";\n * const credential = new DefaultAzureCredential();\n *\n * const client = new OpenAIClient(endpoint, credential);\n * ```\n */\nexport class OpenAIClient {\n  private _client: OpenAIContext;\n  private _isAzure = false;\n\n  /**\n   * Initializes an instance of OpenAIClient for use with an Azure OpenAI resource.\n   * @param endpoint - The URI for an Azure OpenAI resource, including protocol and hostname.\n   *                 For example: https://my-resource.openai.azure.com.\n   * @param credential - A key credential used to authenticate to an Azure OpenAI resource.\n   * @param options - The options for configuring the client.\n   * @remarks\n   *   This constructor initializes an OpenAIClient object that can only be used with Azure OpenAI resources.\n   *   To use OpenAIClient with a non-Azure OpenAI inference endpoint, use a constructor that accepts a non-Azure OpenAI API key instead.\n   */\n  constructor(endpoint: string, credential: KeyCredential, options?: OpenAIClientOptions);\n  /**\n   * Initializes an instance of OpenAIClient for use with an Azure OpenAI resource.\n   * @param endpoint - The URI for an Azure OpenAI resource, including protocol and hostname.\n   *                 For example: https://my-resource.openai.azure.com.\n   * @param credential - A token credential used to authenticate with an Azure OpenAI resource.\n   * @param options - The options for configuring the client.\n   */\n  constructor(endpoint: string, credential: TokenCredential, options?: OpenAIClientOptions);\n  /**\n   * Initializes an instance of OpenAIClient for use with the non-Azure OpenAI endpoint.\n   * @param openAiApiKey - The API key to use when connecting to the non-Azure OpenAI endpoint.\n   * @param options - The options for configuring the client.\n   * @remarks\n   *   OpenAIClient objects initialized with this constructor can only be used with the non-Azure OpenAI inference endpoint.\n   *   To use OpenAIClient with an Azure OpenAI resource, use a constructor that accepts a resource URI and Azure authentication credential instead.\n   */\n  constructor(openAiApiKey: KeyCredential, options?: OpenAIClientOptions);\n  constructor(\n    endpointOrOpenAiKey: string | KeyCredential,\n    credOrOptions: KeyCredential | TokenCredential | OpenAIClientOptions = {},\n    options: OpenAIClientOptions = {},\n  ) {\n    let opts: OpenAIClientOptions;\n    let endpoint: string;\n    let cred: KeyCredential | TokenCredential;\n    if (isCred(credOrOptions)) {\n      endpoint = endpointOrOpenAiKey as string;\n      cred = credOrOptions;\n      opts = options;\n      this._isAzure = true;\n    } else {\n      endpoint = createOpenAIEndpoint(1);\n      cred = endpointOrOpenAiKey as KeyCredential;\n      const { credentials, ...restOpts } = credOrOptions;\n      opts = {\n        credentials: {\n          apiKeyHeaderName: credentials?.apiKeyHeaderName ?? \"Authorization\",\n          scopes: credentials?.scopes,\n        },\n        ...restOpts,\n      };\n    }\n\n    this._client = createOpenAI(endpoint, cred, {\n      ...opts,\n      ...(this._isAzure\n        ? {}\n        : {\n            additionalPolicies: [\n              ...(opts.additionalPolicies ?? []),\n              {\n                position: \"perCall\",\n                policy: nonAzurePolicy(),\n              },\n            ],\n          }),\n    });\n  }\n\n  /**\n   * Returns textual completions as configured for a given prompt.\n   * @param deploymentName - Specifies either the model deployment name (when using Azure OpenAI) or model name (when using non-Azure OpenAI) to use for this request.\n   * @param prompt - The prompt to use for this request.\n   * @param options - The options for this completions request.\n   * @returns The completions for the given prompt.\n   */\n  getCompletions(\n    deploymentName: string,\n    prompt: string[],\n    options: GetCompletionsOptions = { requestOptions: {} },\n  ): Promise<Completions> {\n    this.setModel(deploymentName, options);\n    return getCompletions(this._client, deploymentName, prompt, options);\n  }\n\n  /**\n   * Lists the completions tokens as they become available for a given prompt.\n   * @param deploymentName - The name of the model deployment (when using Azure OpenAI) or model name (when using non-Azure OpenAI) to use for this request.\n   * @param prompt - The prompt to use for this request.\n   * @param options - The completions options for this completions request.\n   * @returns An asynchronous iterable of completions tokens.\n   */\n  streamCompletions(\n    deploymentName: string,\n    prompt: string[],\n    options: GetCompletionsOptions = {},\n  ): Promise<EventStream<Omit<Completions, \"usage\">>> {\n    this.setModel(deploymentName, options);\n    return streamCompletions(this._client, deploymentName, prompt, options);\n  }\n\n  /**\n   * Return the computed embeddings for a given prompt.\n   * @param deploymentName - The name of the model deployment (when using Azure OpenAI) or model name (when using non-Azure OpenAI) to use for this request.\n   * @param input - The prompt to use for this request.\n   * @param options - The embeddings options for this embeddings request.\n   * @returns The embeddings for the given prompt.\n   */\n  getEmbeddings(\n    deploymentName: string,\n    input: string[],\n    options: GetEmbeddingsOptions = { requestOptions: {} },\n  ): Promise<Embeddings> {\n    this.setModel(deploymentName, options);\n    return getEmbeddings(this._client, deploymentName, { input, ...options }, options);\n  }\n\n  /**\n   * Get chat completions for provided chat context messages.\n   * @param deploymentName - The name of the model deployment (when using Azure OpenAI) or model name (when using non-Azure OpenAI) to use for this request.\n   * @param messages - The chat context messages to use for this request.\n   * @param options - The chat completions options for this completions request.\n   * @returns The chat completions for the given chat context messages.\n   */\n  getChatCompletions(\n    deploymentName: string,\n    messages: ChatRequestMessage[],\n    options: GetChatCompletionsOptions = { requestOptions: {} },\n  ): Promise<ChatCompletions> {\n    this.setModel(deploymentName, options);\n    return getChatCompletions(this._client, deploymentName, messages, options);\n  }\n\n  /**\n   * Lists the chat completions tokens as they become available for a chat context.\n   * @param deploymentName - The name of the model deployment (when using Azure OpenAI) or model name (when using non-Azure OpenAI) to use for this request.\n   * @param messages - The chat context messages to use for this request.\n   * @param options - The chat completions options for this chat completions request.\n   * @returns An asynchronous iterable of chat completions tokens.\n   */\n  streamChatCompletions(\n    deploymentName: string,\n    messages: ChatRequestMessage[],\n    options: GetChatCompletionsOptions = { requestOptions: {} },\n  ): Promise<EventStream<ChatCompletions>> {\n    this.setModel(deploymentName, options);\n    return streamChatCompletions(this._client, deploymentName, messages, options);\n  }\n\n  /**\n   * Starts the generation of a batch of images from a text caption\n   * @param deploymentName - The name of the model deployment (when using Azure OpenAI) or model name (when using non-Azure OpenAI) to use for this request.\n   * @param prompt - The prompt to use for this request.\n   * @param options - The options for this image request.\n   * @returns The image generation response (containing url or base64 data).\n   */\n  getImages(\n    deploymentName: string,\n    prompt: string,\n    options: GetImagesOptions = { requestOptions: {} },\n  ): Promise<ImageGenerations> {\n    this.setModel(deploymentName, options);\n    return getImages(this._client, deploymentName, prompt, options);\n  }\n\n  /**\n   * Returns the transcription of an audio file in a simple JSON format.\n   * @param deploymentName - The name of the model deployment (when using Azure OpenAI) or model name (when using non-Azure OpenAI) to use for this request.\n   * @param fileContent - The content of the audio file to transcribe.\n   * @param options - The options for this audio transcription request.\n   * @returns The audio transcription result in a simple JSON format.\n   */\n  async getAudioTranscription(\n    deploymentName: string,\n    fileContent: Uint8Array,\n    options?: GetAudioTranscriptionOptions,\n  ): Promise<AudioResultSimpleJson>;\n  /**\n   * Returns the transcription of an audio file.\n   * @param deploymentName - The name of the model deployment (when using Azure OpenAI) or model name (when using non-Azure OpenAI) to use for this request.\n   * @param fileContent - The content of the audio file to transcribe.\n   * @param format - The format of the result object. See {@link AudioResultFormat} for possible values.\n   * @param options - The options for this audio transcription request.\n   * @returns The audio transcription result in a format of your choice.\n   */\n  async getAudioTranscription<Format extends AudioResultFormat>(\n    deploymentName: string,\n    fileContent: Uint8Array,\n    format: Format,\n    options?: GetAudioTranscriptionOptions,\n  ): Promise<AudioResult<Format>>;\n  async getAudioTranscription<Format extends AudioResultFormat>(\n    deploymentName: string,\n    fileContent: Uint8Array,\n    formatOrOptions?: Format | GetAudioTranscriptionOptions,\n    inputOptions?: GetAudioTranscriptionOptions,\n  ): Promise<AudioResult<Format>> {\n    const options =\n      inputOptions ?? (typeof formatOrOptions === \"string\" ? {} : formatOrOptions ?? {});\n    const response_format = typeof formatOrOptions === \"string\" ? formatOrOptions : undefined;\n    this.setModel(deploymentName, options);\n    if (response_format === undefined) {\n      return getAudioTranscription(this._client, deploymentName, fileContent, options) as Promise<\n        AudioResult<Format>\n      >;\n    }\n\n    return getAudioTranscription(\n      this._client,\n      deploymentName,\n      fileContent,\n      response_format,\n      options,\n    );\n  }\n\n  /**\n   * Returns the translation of an audio file.\n   * @param deploymentName - The name of the model deployment (when using Azure OpenAI) or model name (when using non-Azure OpenAI) to use for this request.\n   * @param fileContent - The content of the audio file to translate.\n   * @param options - The options for this audio translation request.\n   * @returns The audio translation result.\n   */\n  async getAudioTranslation(\n    deploymentName: string,\n    fileContent: Uint8Array,\n    options?: GetAudioTranslationOptions,\n  ): Promise<AudioResultSimpleJson>;\n  /**\n   * Returns the translation of an audio file.\n   * @param deploymentName - The name of the model deployment (when using Azure OpenAI) or model name (when using non-Azure OpenAI) to use for this request.\n   * @param fileContent - The content of the audio file to translate.\n   * @param format - The format of the result object. See {@link AudioResultFormat} for possible values.\n   * @param options - The options for this audio translation request.\n   * @returns The audio translation result.\n   */\n  async getAudioTranslation<Format extends AudioResultFormat>(\n    deploymentName: string,\n    fileContent: Uint8Array,\n    format: Format,\n    options?: GetAudioTranslationOptions,\n  ): Promise<AudioResult<Format>>;\n  async getAudioTranslation<Format extends AudioResultFormat>(\n    deploymentName: string,\n    fileContent: Uint8Array,\n    formatOrOptions?: Format | GetAudioTranslationOptions,\n    inputOptions?: GetAudioTranslationOptions,\n  ): Promise<AudioResult<Format>> {\n    const options =\n      inputOptions ?? (typeof formatOrOptions === \"string\" ? {} : formatOrOptions ?? {});\n    const response_format = typeof formatOrOptions === \"string\" ? formatOrOptions : undefined;\n    this.setModel(deploymentName, options);\n    if (response_format === undefined) {\n      return getAudioTranslation(this._client, deploymentName, fileContent, options) as Promise<\n        AudioResult<Format>\n      >;\n    }\n\n    return getAudioTranslation(this._client, deploymentName, fileContent, response_format, options);\n  }\n\n  private setModel(model: string, options: Record<string, any>): void {\n    if (!this._isAzure) {\n      options.model = model;\n    }\n  }\n}\n\nfunction createOpenAIEndpoint(version: number): string {\n  return `https://api.openai.com/v${version}`;\n}\n\nfunction isCred(cred: Record<string, any>): cred is TokenCredential | KeyCredential {\n  return isTokenCredential(cred) || cred.key !== undefined;\n}\n"]}
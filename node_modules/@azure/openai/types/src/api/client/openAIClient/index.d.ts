/**
 * THIS IS AN AUTO-GENERATED FILE - DO NOT EDIT!
 *
 * Any changes you make here may be lost.
 *
 * If you need to make changes, please do so in the original source file, \{project-root\}/sources/custom
 */
import { StreamableMethod } from "@azure-rest/core-client";
import { AudioResult, AudioResultFormat, AudioResultSimpleJson, GetAudioTranscriptionOptions, GetAudioTranslationOptions } from "../../../models/audio.js";
import { AudioTranscription, AudioTranscriptionOptions, AudioTranslation, AudioTranslationOptions, ChatCompletions, ChatCompletionsOptions, ChatRequestMessage, Completions, CompletionsOptions, Embeddings, EmbeddingsOptions, EventStream, ImageGenerations } from "../../../models/models.js";
import { ClientOpenAIClientGetAudioTranscriptionAsPlainTextOptions, ClientOpenAIClientGetAudioTranscriptionAsResponseObjectOptions, ClientOpenAIClientGetAudioTranslationAsPlainTextOptions, ClientOpenAIClientGetAudioTranslationAsResponseObjectOptions, ClientOpenAIClientGetChatCompletionsWithAzureExtensionsOptions, ClientOpenAIClientGetCompletionsOptions, ClientOpenAIClientGetEmbeddingsOptions, ClientOpenAIClientGetImageGenerationsOptions, GetChatCompletionsOptions, GetCompletionsOptions, GetImagesOptions } from "../../../models/options.js";
import { OpenAIContext as Client, GetAudioTranscriptionAsPlainText200Response, GetAudioTranscriptionAsPlainTextDefaultResponse, GetAudioTranscriptionAsResponseObject200Response, GetAudioTranscriptionAsResponseObjectDefaultResponse, GetAudioTranslationAsPlainText200Response, GetAudioTranslationAsPlainTextDefaultResponse, GetAudioTranslationAsResponseObject200Response, GetAudioTranslationAsResponseObjectDefaultResponse, GetChatCompletions200Response, GetChatCompletionsDefaultResponse, GetCompletions200Response, GetCompletionsDefaultResponse, GetEmbeddings200Response, GetEmbeddingsDefaultResponse, GetImageGenerations200Response, GetImageGenerationsDefaultResponse } from "../../../rest/index.js";
import { ImageGenerationOptions as GeneratedImageGenerationOptions } from "../../../models/models.js";
export declare function _getAudioTranscriptionAsPlainTextSend(context: Client, deploymentId: string, body: AudioTranscriptionOptions, options?: ClientOpenAIClientGetAudioTranscriptionAsPlainTextOptions): StreamableMethod<GetAudioTranscriptionAsPlainText200Response | GetAudioTranscriptionAsPlainTextDefaultResponse>;
export declare function _getAudioTranscriptionAsPlainTextDeserialize(result: GetAudioTranscriptionAsPlainText200Response | GetAudioTranscriptionAsPlainTextDefaultResponse): Promise<string>;
/**
 * Gets transcribed text and associated metadata from provided spoken audio data. Audio will be transcribed in the
 * written language corresponding to the language it was spoken in.
 */
export declare function getAudioTranscriptionAsPlainText(context: Client, deploymentId: string, body: AudioTranscriptionOptions, options?: ClientOpenAIClientGetAudioTranscriptionAsPlainTextOptions): Promise<string>;
export declare function _getAudioTranscriptionAsResponseObjectSend(context: Client, deploymentId: string, body: AudioTranscriptionOptions, options?: ClientOpenAIClientGetAudioTranscriptionAsResponseObjectOptions): StreamableMethod<GetAudioTranscriptionAsResponseObject200Response | GetAudioTranscriptionAsResponseObjectDefaultResponse>;
export declare function _getAudioTranscriptionAsResponseObjectDeserialize(result: GetAudioTranscriptionAsResponseObject200Response | GetAudioTranscriptionAsResponseObjectDefaultResponse): Promise<AudioTranscription>;
/**
 * Gets transcribed text and associated metadata from provided spoken audio data. Audio will be transcribed in the
 * written language corresponding to the language it was spoken in.
 */
export declare function getAudioTranscriptionAsResponseObject(context: Client, deploymentId: string, body: AudioTranscriptionOptions, options?: ClientOpenAIClientGetAudioTranscriptionAsResponseObjectOptions): Promise<AudioTranscription>;
export declare function _getAudioTranslationAsPlainTextSend(context: Client, deploymentId: string, body: AudioTranslationOptions, options?: ClientOpenAIClientGetAudioTranslationAsPlainTextOptions): StreamableMethod<GetAudioTranslationAsPlainText200Response | GetAudioTranslationAsPlainTextDefaultResponse>;
export declare function _getAudioTranslationAsPlainTextDeserialize(result: GetAudioTranslationAsPlainText200Response | GetAudioTranslationAsPlainTextDefaultResponse): Promise<string>;
/** Gets English language transcribed text and associated metadata from provided spoken audio data. */
export declare function getAudioTranslationAsPlainText(context: Client, deploymentId: string, body: AudioTranslationOptions, options?: ClientOpenAIClientGetAudioTranslationAsPlainTextOptions): Promise<string>;
export declare function _getAudioTranslationAsResponseObjectSend(context: Client, deploymentId: string, body: AudioTranslationOptions, options?: ClientOpenAIClientGetAudioTranslationAsResponseObjectOptions): StreamableMethod<GetAudioTranslationAsResponseObject200Response | GetAudioTranslationAsResponseObjectDefaultResponse>;
export declare function _getAudioTranslationAsResponseObjectDeserialize(result: GetAudioTranslationAsResponseObject200Response | GetAudioTranslationAsResponseObjectDefaultResponse): Promise<AudioTranslation>;
/** Gets English language transcribed text and associated metadata from provided spoken audio data. */
export declare function getAudioTranslationAsResponseObject(context: Client, deploymentId: string, body: AudioTranslationOptions, options?: ClientOpenAIClientGetAudioTranslationAsResponseObjectOptions): Promise<AudioTranslation>;
export declare function _getCompletionsSend(context: Client, deploymentId: string, body: CompletionsOptions, options?: ClientOpenAIClientGetCompletionsOptions): StreamableMethod<GetCompletions200Response | GetCompletionsDefaultResponse>;
/**
 * Gets completions for the provided input prompts.
 * Completions support a wide variety of tasks and generate text that continues from or "completes"
 * provided prompt data.
 */
export declare function getCompletions(context: Client, deploymentName: string, prompt: string[], options?: GetCompletionsOptions): Promise<Completions>;
export declare function _getCompletionsDeserialize(result: GetCompletions200Response | GetCompletionsDefaultResponse): Promise<Completions>;
export declare function _getChatCompletionsDeserialize(result: GetChatCompletions200Response | GetChatCompletionsDefaultResponse): Promise<ChatCompletions>;
export declare function _getImageGenerationsSend(context: Client, deploymentId: string, body: GeneratedImageGenerationOptions, options?: ClientOpenAIClientGetImageGenerationsOptions): StreamableMethod<GetImageGenerations200Response | GetImageGenerationsDefaultResponse>;
export declare function _getImageGenerationsDeserialize(result: GetImageGenerations200Response | GetImageGenerationsDefaultResponse): Promise<ImageGenerations>;
/** Creates an image given a prompt. */
export declare function getImageGenerations(context: Client, deploymentId: string, body: GeneratedImageGenerationOptions, options?: ClientOpenAIClientGetImageGenerationsOptions): Promise<ImageGenerations>;
export declare function _getEmbeddingsSend(context: Client, deploymentId: string, body: EmbeddingsOptions, options?: ClientOpenAIClientGetEmbeddingsOptions): StreamableMethod<GetEmbeddings200Response | GetEmbeddingsDefaultResponse>;
export declare function _getEmbeddingsDeserialize(result: GetEmbeddings200Response | GetEmbeddingsDefaultResponse): Promise<Embeddings>;
/** Return the embeddings for a given prompt. */
export declare function getEmbeddings(context: Client, deploymentId: string, body: EmbeddingsOptions, options?: ClientOpenAIClientGetEmbeddingsOptions): Promise<Embeddings>;
export declare function streamCompletions(context: Client, deploymentName: string, prompt: string[], options?: GetCompletionsOptions): Promise<EventStream<Omit<Completions, "usage">>>;
export declare function getImages(context: Client, deploymentName: string, prompt: string, options?: GetImagesOptions): Promise<ImageGenerations>;
export declare function streamChatCompletions(context: Client, deploymentName: string, messages: ChatRequestMessage[], options?: GetChatCompletionsOptions): Promise<EventStream<ChatCompletions>>;
/**
 * Gets chat completions for the provided chat messages.
 * Completions support a wide variety of tasks and generate text that continues from or "completes"
 * provided prompt data.
 */
export declare function getChatCompletions(context: Client, deploymentName: string, messages: ChatRequestMessage[], options?: GetChatCompletionsOptions): Promise<ChatCompletions>;
/**
 * Returns the translation of an audio file.
 * @param context - The context containing the client to use for this request.
 * @param deploymentName - The name of the model deployment (when using Azure OpenAI) or model name (when using non-Azure OpenAI) to use for this request.
 * @param fileContent - The content of the audio file to translate.
 * @param options - The options for this audio translation request.
 * @returns The audio translation result.
 */
export declare function getAudioTranslation(context: Client, deploymentName: string, fileContent: Uint8Array, options?: GetAudioTranslationOptions): Promise<AudioResultSimpleJson>;
/**
 * Returns the translation of an audio file.
 * @param context - The context containing the client to use for this request.
 * @param deploymentName - The name of the model deployment (when using Azure OpenAI) or model name (when using non-Azure OpenAI) to use for this request.
 * @param fileContent - The content of the audio file to translate.
 * @param format - The format of the result object. See {@link AudioResultFormat} for possible values.
 * @param options - The options for this audio translation request.
 * @returns The audio translation result.
 */
export declare function getAudioTranslation<Format extends AudioResultFormat>(context: Client, deploymentName: string, fileContent: Uint8Array, format: Format, options?: GetAudioTranslationOptions): Promise<AudioResult<Format>>;
/**
 * Returns the transcription of an audio file in a simple JSON format.
 * @param context - The context containing the client to use for this request.
 * @param deploymentName - The name of the model deployment (when using Azure OpenAI) or model name (when using non-Azure OpenAI) to use for this request.
 * @param fileContent - The content of the audio file to transcribe.
 * @param options - The options for this audio transcription request.
 * @returns The audio transcription result in a simple JSON format.
 */
export declare function getAudioTranscription(context: Client, deploymentName: string, fileContent: Uint8Array, options?: GetAudioTranscriptionOptions): Promise<AudioResultSimpleJson>;
/**
 * Returns the transcription of an audio file.
 * @param context - The context containing the client to use for this request.
 * @param deploymentName - The name of the model deployment (when using Azure OpenAI) or model name (when using non-Azure OpenAI) to use for this request.
 * @param fileContent - The content of the audio file to transcribe.
 * @param format - The format of the result object. See {@link AudioResultFormat} for possible values.
 * @param options - The options for this audio transcription request.
 * @returns The audio transcription result in a format of your choice.
 */
export declare function getAudioTranscription<Format extends AudioResultFormat>(context: Client, deploymentName: string, fileContent: Uint8Array, format: Format, options?: GetAudioTranscriptionOptions): Promise<AudioResult<Format>>;
export declare function _getChatCompletionsWithAzureExtensionsDeserialize(): Promise<any>;
export declare function getChatCompletionsWithAzureExtensions(_context: Client, _deploymentId: string, _body: ChatCompletionsOptions, _options?: ClientOpenAIClientGetChatCompletionsWithAzureExtensionsOptions): Promise<ChatCompletions>;
//# sourceMappingURL=index.d.ts.map
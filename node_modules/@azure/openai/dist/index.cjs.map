{"version":3,"file":"index.cjs","sources":["../src/logger.ts","../src/rest/openAIClient.ts","../src/rest/isUnexpected.ts","../src/api/OpenAIContext.ts","../src/api/util.ts","../src/api/getSSEs.ts","../src/api/readableStreamUtils.ts","../src/api/oaiSse.ts","../src/api/client/openAIClient/deserializers.ts","../src/api/client/openAIClient/index.ts","../src/api/policies/nonAzure.ts","../src/OpenAIClient.ts","../src/OpenAIKeyCredential.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * THIS IS AN AUTO-GENERATED FILE - DO NOT EDIT!\n *\n * Any changes you make here may be lost.\n *\n * If you need to make changes, please do so in the original source file, \\{project-root\\}/sources/custom\n */\n\nimport { createClientLogger } from \"@azure/logger\";\nexport const logger = createClientLogger(\"openai\");\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * THIS IS AN AUTO-GENERATED FILE - DO NOT EDIT!\n *\n * Any changes you make here may be lost.\n *\n * If you need to make changes, please do so in the original source file, \\{project-root\\}/sources/custom\n */\n\nimport { getClient, ClientOptions } from \"@azure-rest/core-client\";\nimport { logger } from \"../logger.js\";\nimport { TokenCredential, KeyCredential } from \"@azure/core-auth\";\nimport { OpenAIContext } from \"./clientDefinitions.js\";\n\n/**\n * Initialize a new instance of `OpenAIContext`\n * @param endpoint - Supported Cognitive Services endpoints (protocol and hostname, for example:\n * https://westus.api.cognitive.microsoft.com).\n * @param credentials - uniquely identify client credential\n * @param options - the parameter for all optional parameters\n */\nexport default function createClient(\n  endpoint: string,\n  credentials: TokenCredential | KeyCredential,\n  options: ClientOptions = {},\n): OpenAIContext {\n  const baseUrl = options.baseUrl ?? `${endpoint}/openai`;\n  options.apiVersion = options.apiVersion ?? \"2023-12-01-preview\";\n  const userAgentInfo = `azsdk-js-openai-rest/1.0.0-beta.11`;\n  const userAgentPrefix =\n    options.userAgentOptions && options.userAgentOptions.userAgentPrefix\n      ? `${options.userAgentOptions.userAgentPrefix} ${userAgentInfo}`\n      : `${userAgentInfo}`;\n  options = {\n    ...options,\n    userAgentOptions: {\n      userAgentPrefix,\n    },\n    loggingOptions: {\n      logger: options.loggingOptions?.logger ?? logger.info,\n    },\n    credentials: {\n      scopes: options.credentials?.scopes ?? [\"https://cognitiveservices.azure.com/.default\"],\n      apiKeyHeaderName: options.credentials?.apiKeyHeaderName ?? \"api-key\",\n    },\n  };\n\n  const client = getClient(baseUrl, credentials, options) as OpenAIContext;\n\n  return client;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * THIS IS AN AUTO-GENERATED FILE - DO NOT EDIT!\n *\n * Any changes you make here may be lost.\n *\n * If you need to make changes, please do so in the original source file, \\{project-root\\}/sources/custom\n */\n\nimport {\n  GetAudioTranscriptionAsPlainText200Response,\n  GetAudioTranscriptionAsResponseObject200Response,\n  GetAudioTranscriptionAsPlainTextDefaultResponse,\n  GetAudioTranslationAsPlainText200Response,\n  GetAudioTranslationAsResponseObject200Response,\n  GetAudioTranslationAsPlainTextDefaultResponse,\n  GetCompletions200Response,\n  GetCompletionsDefaultResponse,\n  GetChatCompletions200Response,\n  GetChatCompletionsDefaultResponse,\n  GetChatCompletionsWithAzureExtensions200Response,\n  GetChatCompletionsWithAzureExtensionsDefaultResponse,\n  GetImageGenerations200Response,\n  GetImageGenerationsDefaultResponse,\n  GetEmbeddings200Response,\n  GetEmbeddingsDefaultResponse,\n  GetAzureBatchImageGenerationOperationStatus200Response,\n  GetAzureBatchImageGenerationOperationStatusDefaultResponse,\n  BeginAzureBatchImageGeneration202Response,\n  BeginAzureBatchImageGenerationLogicalResponse,\n  BeginAzureBatchImageGenerationDefaultResponse,\n} from \"./responses.js\";\n\nconst responseMap: Record<string, string[]> = {\n  \"POST /deployments/{deploymentId}/audio/transcriptions\": [\"200\"],\n  \"POST /deployments/{deploymentId}/audio/translations\": [\"200\"],\n  \"POST /deployments/{deploymentId}/completions\": [\"200\"],\n  \"POST /deployments/{deploymentId}/chat/completions\": [\"200\"],\n  \"POST /deployments/{deploymentId}/extensions/chat/completions\": [\"200\"],\n  \"POST /deployments/{deploymentId}/images/generations\": [\"200\"],\n  \"POST /deployments/{deploymentId}/embeddings\": [\"200\"],\n  \"GET /operations/images/{operationId}\": [\"200\"],\n  \"POST /images/generations:submit\": [\"202\"],\n  \"GET /images/generations:submit\": [\"200\", \"202\"],\n};\n\nexport function isUnexpected(\n  response:\n    | GetAudioTranscriptionAsPlainText200Response\n    | GetAudioTranscriptionAsResponseObject200Response\n    | GetAudioTranscriptionAsPlainTextDefaultResponse,\n): response is GetAudioTranscriptionAsPlainTextDefaultResponse;\nexport function isUnexpected(\n  response:\n    | GetAudioTranslationAsPlainText200Response\n    | GetAudioTranslationAsResponseObject200Response\n    | GetAudioTranslationAsPlainTextDefaultResponse,\n): response is GetAudioTranslationAsPlainTextDefaultResponse;\nexport function isUnexpected(\n  response: GetCompletions200Response | GetCompletionsDefaultResponse,\n): response is GetCompletionsDefaultResponse;\nexport function isUnexpected(\n  response: GetChatCompletions200Response | GetChatCompletionsDefaultResponse,\n): response is GetChatCompletionsDefaultResponse;\nexport function isUnexpected(\n  response:\n    | GetChatCompletionsWithAzureExtensions200Response\n    | GetChatCompletionsWithAzureExtensionsDefaultResponse,\n): response is GetChatCompletionsWithAzureExtensionsDefaultResponse;\nexport function isUnexpected(\n  response: GetImageGenerations200Response | GetImageGenerationsDefaultResponse,\n): response is GetImageGenerationsDefaultResponse;\nexport function isUnexpected(\n  response: GetEmbeddings200Response | GetEmbeddingsDefaultResponse,\n): response is GetEmbeddingsDefaultResponse;\nexport function isUnexpected(\n  response:\n    | GetAzureBatchImageGenerationOperationStatus200Response\n    | GetAzureBatchImageGenerationOperationStatusDefaultResponse,\n): response is GetAzureBatchImageGenerationOperationStatusDefaultResponse;\nexport function isUnexpected(\n  response:\n    | BeginAzureBatchImageGeneration202Response\n    | BeginAzureBatchImageGenerationLogicalResponse\n    | BeginAzureBatchImageGenerationDefaultResponse,\n): response is BeginAzureBatchImageGenerationDefaultResponse;\nexport function isUnexpected(\n  response:\n    | GetAudioTranscriptionAsPlainText200Response\n    | GetAudioTranscriptionAsResponseObject200Response\n    | GetAudioTranscriptionAsPlainTextDefaultResponse\n    | GetAudioTranslationAsPlainText200Response\n    | GetAudioTranslationAsResponseObject200Response\n    | GetAudioTranslationAsPlainTextDefaultResponse\n    | GetCompletions200Response\n    | GetCompletionsDefaultResponse\n    | GetChatCompletions200Response\n    | GetChatCompletionsDefaultResponse\n    | GetChatCompletionsWithAzureExtensions200Response\n    | GetChatCompletionsWithAzureExtensionsDefaultResponse\n    | GetImageGenerations200Response\n    | GetImageGenerationsDefaultResponse\n    | GetEmbeddings200Response\n    | GetEmbeddingsDefaultResponse\n    | GetAzureBatchImageGenerationOperationStatus200Response\n    | GetAzureBatchImageGenerationOperationStatusDefaultResponse\n    | BeginAzureBatchImageGeneration202Response\n    | BeginAzureBatchImageGenerationLogicalResponse\n    | BeginAzureBatchImageGenerationDefaultResponse,\n): response is\n  | GetAudioTranscriptionAsPlainTextDefaultResponse\n  | GetAudioTranslationAsPlainTextDefaultResponse\n  | GetCompletionsDefaultResponse\n  | GetChatCompletionsDefaultResponse\n  | GetChatCompletionsWithAzureExtensionsDefaultResponse\n  | GetImageGenerationsDefaultResponse\n  | GetEmbeddingsDefaultResponse\n  | GetAzureBatchImageGenerationOperationStatusDefaultResponse\n  | BeginAzureBatchImageGenerationDefaultResponse {\n  const lroOriginal = response.headers[\"x-ms-original-url\"];\n  const url = new URL(lroOriginal ?? response.request.url);\n  const method = response.request.method;\n  let pathDetails = responseMap[`${method} ${url.pathname}`];\n  if (!pathDetails) {\n    pathDetails = getParametrizedPathSuccess(method, url.pathname);\n  }\n  return !pathDetails.includes(response.status);\n}\n\nfunction getParametrizedPathSuccess(method: string, path: string): string[] {\n  const pathParts = path.split(\"/\");\n\n  // Traverse list to match the longest candidate\n  // matchedLen: the length of candidate path\n  // matchedValue: the matched status code array\n  let matchedLen = -1,\n    matchedValue: string[] = [];\n\n  // Iterate the responseMap to find a match\n  for (const [key, value] of Object.entries(responseMap)) {\n    // Extracting the path from the map key which is in format\n    // GET /path/foo\n    if (!key.startsWith(method)) {\n      continue;\n    }\n    const candidatePath = getPathFromMapKey(key);\n    // Get each part of the url path\n    const candidateParts = candidatePath.split(\"/\");\n\n    // track if we have found a match to return the values found.\n    let found = true;\n    for (let i = candidateParts.length - 1, j = pathParts.length - 1; i >= 1 && j >= 1; i--, j--) {\n      if (candidateParts[i]?.startsWith(\"{\") && candidateParts[i]?.indexOf(\"}\") !== -1) {\n        const start = candidateParts[i]!.indexOf(\"}\") + 1,\n          end = candidateParts[i]?.length;\n        // If the current part of the candidate is a \"template\" part\n        // Try to use the suffix of pattern to match the path\n        // {guid} ==> $\n        // {guid}:export ==> :export$\n        const isMatched = new RegExp(`${candidateParts[i]?.slice(start, end)}`).test(\n          pathParts[j] || \"\",\n        );\n\n        if (!isMatched) {\n          found = false;\n          break;\n        }\n        continue;\n      }\n\n      // If the candidate part is not a template and\n      // the parts don't match mark the candidate as not found\n      // to move on with the next candidate path.\n      if (candidateParts[i] !== pathParts[j]) {\n        found = false;\n        break;\n      }\n    }\n\n    // We finished evaluating the current candidate parts\n    // Update the matched value if and only if we found the longer pattern\n    if (found && candidatePath.length > matchedLen) {\n      matchedLen = candidatePath.length;\n      matchedValue = value;\n    }\n  }\n\n  return matchedValue;\n}\n\nfunction getPathFromMapKey(mapKey: string): string {\n  const pathStart = mapKey.indexOf(\"/\");\n  return mapKey.slice(pathStart);\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * THIS IS AN AUTO-GENERATED FILE - DO NOT EDIT!\n *\n * Any changes you make here may be lost.\n *\n * If you need to make changes, please do so in the original source file, \\{project-root\\}/sources/custom\n */\n\nimport { TokenCredential, KeyCredential } from \"@azure/core-auth\";\nimport { ClientOptions } from \"@azure-rest/core-client\";\nimport { OpenAIContext } from \"../rest/index.js\";\nimport getClient from \"../rest/index.js\";\n\nexport interface OpenAIClientOptions extends ClientOptions {}\n\nexport { OpenAIContext } from \"../rest/index.js\";\n\nexport function createOpenAI(\n  endpoint: string,\n  credential: KeyCredential | TokenCredential,\n  options: OpenAIClientOptions = {},\n): OpenAIContext {\n  const clientContext = getClient(endpoint, credential, options);\n  return clientContext;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * THIS IS AN AUTO-GENERATED FILE - DO NOT EDIT!\n *\n * Any changes you make here may be lost.\n *\n * If you need to make changes, please do so in the original source file, \\{project-root\\}/sources/custom\n */\n\ntype CamelCase<S extends string> = S extends `${infer P1}_${infer P2}`\n  ? `${Lowercase<P1>}${Capitalize<CamelCase<P2>>}`\n  : Lowercase<S>;\ntype SnakeCase<S extends string> = S extends `${infer T}${infer U}`\n  ? `${T extends Capitalize<T> ? \"_\" : \"\"}${Lowercase<T>}${SnakeCase<U>}`\n  : S;\n\ntype MapCamelCaseKeysOverCollections<T> =\n  T extends Array<infer X> ? Array<MapCamelCaseKeysOverCollections<X>> : CamelCaseKeys<T>;\ntype MapSnakeCaseKeysOverCollections<T> =\n  T extends Array<infer X>\n    ? Array<MapSnakeCaseKeysOverCollections<X>>\n    : // : T extends (infer X | infer Y)\n      // ? MapSnakeCaseKeysOverCollections<X> | MapSnakeCaseKeysOverCollections<Y>\n      SnakeCaseKeys<T>;\ntype CamelCaseKeys<T> = {\n  [K in keyof T as CamelCase<K & string>]: MapCamelCaseKeysOverCollections<T[K]>;\n};\nexport type SnakeCaseKeys<T> = {\n  [K in keyof T as SnakeCase<K & string>]: MapSnakeCaseKeysOverCollections<T[K]>;\n};\n\nexport function wrapError<T>(f: () => T, message: string): T {\n  try {\n    const result = f();\n    return result;\n  } catch (cause) {\n    throw new Error(`${message}: ${cause}`, { cause });\n  }\n}\n\nexport function camelCaseKeys<O extends Record<string, any>>(obj: O): CamelCaseKeys<O> {\n  if (typeof obj !== \"object\" || !obj) return obj;\n  if (Array.isArray(obj)) {\n    return obj.map((v) =>\n      camelCaseKeys<O extends Array<infer X> ? (X extends Record<string, any> ? X : never) : never>(\n        v,\n      ),\n    ) as CamelCaseKeys<O>;\n  } else {\n    for (const key of Object.keys(obj)) {\n      const value = obj[key];\n      const newKey = tocamelCase(key);\n      if (newKey !== key) {\n        delete obj[key];\n      }\n      (obj[newKey] as Record<string, any>) =\n        typeof obj[newKey] === \"object\" ? camelCaseKeys(value) : value;\n    }\n    return obj;\n  }\n}\n\nexport function snakeCaseKeys<O extends Record<string, any>>(obj: O): SnakeCaseKeys<O> {\n  if (typeof obj !== \"object\" || !obj) return obj;\n  if (Array.isArray(obj)) {\n    return obj.map((v) =>\n      snakeCaseKeys<O extends Array<infer X> ? (X extends Record<string, any> ? X : never) : never>(\n        v,\n      ),\n    ) as SnakeCaseKeys<O>;\n  } else {\n    for (const key of Object.keys(obj)) {\n      const value = obj[key];\n      const newKey = toSnakeCase(key);\n      if (newKey !== key) {\n        delete obj[key];\n      }\n      (obj[newKey] as Record<string, any>) =\n        typeof obj[newKey] === \"object\" ? snakeCaseKeys(value) : value;\n    }\n    return obj;\n  }\n}\n\nfunction tocamelCase<P extends string>(str: P): CamelCase<P> {\n  return str\n    .toLowerCase()\n    .replace(/([_][a-z])/g, (group) => group.toUpperCase().replace(\"_\", \"\")) as CamelCase<P>;\n}\n\nfunction toSnakeCase<P extends string>(str: P): SnakeCase<P> {\n  return str\n    .replace(/([A-Z])/g, (group) => `_${group.toLowerCase()}`)\n    .replace(/^_/, \"\") as SnakeCase<P>;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * THIS IS AN AUTO-GENERATED FILE - DO NOT EDIT!\n *\n * Any changes you make here may be lost.\n *\n * If you need to make changes, please do so in the original source file, \\{project-root\\}/sources/custom\n */\n\nimport { StreamableMethod } from \"@azure-rest/core-client\";\nimport { RestError } from \"@azure/core-rest-pipeline\";\nimport { wrapError } from \"./util.js\";\nimport { IncomingMessage } from \"http\";\n\nexport async function getStream<TResponse>(\n  response: StreamableMethod<TResponse>,\n): Promise<IncomingMessage> {\n  const { body, status } = await response.asNodeStream();\n  if (status !== \"200\" && body !== undefined) {\n    const text = await streamToText(body);\n    throw wrapError(() => JSON.parse(text).error, \"Error parsing response body\");\n  }\n\n  if (!body) throw new Error(\"No stream found in response. Did you enable the stream option?\");\n  return body as IncomingMessage;\n}\n\nfunction streamToText(stream: NodeJS.ReadableStream): Promise<string> {\n  return new Promise<string>((resolve, reject) => {\n    const buffer: Buffer[] = [];\n\n    stream.on(\"data\", (chunk) => {\n      if (Buffer.isBuffer(chunk)) {\n        buffer.push(chunk);\n      } else {\n        buffer.push(Buffer.from(chunk));\n      }\n    });\n    stream.on(\"end\", () => {\n      resolve(Buffer.concat(buffer).toString(\"utf8\"));\n    });\n    stream.on(\"error\", (e) => {\n      if (e && e?.name === \"AbortError\") {\n        reject(e);\n      } else {\n        reject(\n          new RestError(`Error reading response as text: ${e.message}`, {\n            code: RestError.PARSE_ERROR,\n          }),\n        );\n      }\n    });\n  });\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * THIS IS AN AUTO-GENERATED FILE - DO NOT EDIT!\n *\n * Any changes you make here may be lost.\n *\n * If you need to make changes, please do so in the original source file, \\{project-root\\}/sources/custom\n */\n\nexport function polyfillStream<T>(stream: ReadableStream<T>): ReadableStream<T> & AsyncIterable<T> {\n  makeAsyncIterable<T>(stream);\n  return stream;\n}\n\nfunction makeAsyncIterable<T>(\n  webStream: any,\n): asserts webStream is ReadableStream<T> & AsyncIterable<T> {\n  if (!webStream[Symbol.asyncIterator]) {\n    webStream[Symbol.asyncIterator] = () => toAsyncIterable(webStream);\n  }\n\n  if (!webStream.values) {\n    webStream.values = () => toAsyncIterable(webStream);\n  }\n}\n\nasync function* toAsyncIterable<T>(stream: ReadableStream<T>): AsyncIterableIterator<T> {\n  const reader = stream.getReader();\n  try {\n    while (true) {\n      const { value, done } = await reader.read();\n      if (done) {\n        return;\n      }\n      yield value;\n    }\n  } finally {\n    const cancelPromise = reader.cancel();\n    reader.releaseLock();\n    await cancelPromise;\n  }\n}\n\nexport async function streamToText(stream: ReadableStream<Uint8Array>): Promise<string> {\n  const reader = stream.getReader();\n  const buffers: Uint8Array[] = [];\n  let length = 0;\n  try {\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      const { value, done } = await reader.read();\n      if (done) {\n        return new TextDecoder().decode(concatBuffers(buffers, length));\n      }\n      length += value.length;\n      buffers.push(value);\n    }\n  } finally {\n    reader.releaseLock();\n  }\n}\n\nfunction getBuffersLength(buffers: Uint8Array[]): number {\n  return buffers.reduce((acc, curr) => acc + curr.length, 0);\n}\n\nfunction concatBuffers(buffers: Uint8Array[], len?: number): Uint8Array {\n  const length = len ?? getBuffersLength(buffers);\n  const res = new Uint8Array(length);\n  for (let i = 0, pos = 0; i < buffers.length; i++) {\n    const buffer = buffers[i];\n    res.set(buffer, pos);\n    pos += buffer.length;\n  }\n\n  return res;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * THIS IS AN AUTO-GENERATED FILE - DO NOT EDIT!\n *\n * Any changes you make here may be lost.\n *\n * If you need to make changes, please do so in the original source file, \\{project-root\\}/sources/custom\n */\n\nimport { StreamableMethod } from \"@azure-rest/core-client\";\nimport { getStream } from \"./getSSEs.js\";\nimport { wrapError } from \"./util.js\";\nimport { EventStream } from \"../models/models.js\";\nimport { EventMessage, createSseStream } from \"@azure/core-sse\";\nimport { polyfillStream } from \"./readableStreamUtils.js\";\n\nexport async function getOaiSSEs<TEvent, O extends Record<string, any>>(\n  response: StreamableMethod<unknown>,\n  toEvent: (obj: O) => TEvent,\n): Promise<EventStream<TEvent>> {\n  const stringStream = await getStream(response);\n  const eventStream = createSseStream(stringStream);\n  const jsonParser = new TransformStream<EventMessage, TEvent>({\n    transform: async (chunk, controller) => {\n      if (chunk.data === \"[DONE]\") {\n        return;\n      }\n      controller.enqueue(\n        toEvent(\n          wrapError(\n            () => JSON.parse(chunk.data),\n            \"Error parsing an event. See 'cause' for more details\",\n          ),\n        ),\n      );\n    },\n  });\n  /** TODO: remove these polyfills once all supported runtimes support them */\n  return polyfillStream(eventStream.pipeThrough(jsonParser));\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * THIS IS AN AUTO-GENERATED FILE - DO NOT EDIT!\n *\n * Any changes you make here may be lost.\n *\n * If you need to make changes, please do so in the original source file, \\{project-root\\}/sources/custom\n */\n\nimport { ErrorModel } from \"@azure-rest/core-client\";\nimport {\n  ChatCompletions,\n  ChatResponseMessage,\n  Completions,\n  ContentFilterResultDetailsForPrompt,\n  ContentFilterResultsForChoice,\n  ContentFilterResultsForPrompt,\n} from \"../../../models/models.js\";\nimport {\n  ChatCompletionsOutput,\n  ChatResponseMessageOutput,\n  CompletionsOutput,\n  ContentFilterResultDetailsForPromptOutput,\n  ContentFilterResultsForChoiceOutput,\n  ContentFilterResultsForPromptOutput,\n} from \"../../../rest/outputModels.js\";\nimport { camelCaseKeys } from \"../../util.js\";\n\ntype ContentFilterResultsForPromptX = {\n  prompt_filter_results?: Array<ContentFilterResultsForPromptOutput>;\n  prompt_annotations?: Array<ContentFilterResultsForPromptOutput>;\n};\n\nfunction getContentFilterResultsForPrompt({\n  prompt_annotations,\n  prompt_filter_results,\n}: ContentFilterResultsForPromptX): ContentFilterResultsForPrompt[] {\n  const res = prompt_filter_results ?? prompt_annotations;\n  return (\n    res?.map(({ content_filter_results, ...rest }) => ({\n      ...camelCaseKeys(rest),\n      contentFilterResults: parseContentFilterResultDetailsForPromptOutput(content_filter_results),\n    })) ?? []\n  );\n}\n\nexport function getCompletionsResult(\n  body: CompletionsOutput & ContentFilterResultsForPromptX,\n): Completions {\n  const { created, choices, prompt_filter_results, prompt_annotations, ...rest } = body;\n  return {\n    ...camelCaseKeys(rest),\n    created: new Date(created),\n    promptFilterResults: getContentFilterResultsForPrompt({\n      prompt_filter_results,\n      prompt_annotations,\n    }),\n    choices: choices.map(({ content_filter_results, ...choice }) => ({\n      ...camelCaseKeys(choice),\n      ...(!content_filter_results\n        ? {}\n        : {\n            contentFilterResults: parseContentFilterResultsForChoiceOutput(content_filter_results),\n          }),\n    })),\n  };\n}\n\nexport function getChatCompletionsResult(\n  body: ChatCompletionsOutput & ContentFilterResultsForPromptX,\n): ChatCompletions {\n  const { created, choices, prompt_filter_results, prompt_annotations, ...rest } = body;\n  return {\n    ...camelCaseKeys(rest),\n    created: new Date(created),\n    promptFilterResults: getContentFilterResultsForPrompt({\n      prompt_filter_results,\n      prompt_annotations,\n    }),\n    choices: !choices\n      ? []\n      : choices.map(({ content_filter_results, delta, message, ...choice }) => ({\n          ...camelCaseKeys(choice),\n          ...(!delta ? {} : { delta: parseMessage(delta) }),\n          ...(!message ? {} : { message: parseMessage(message) }),\n          ...(!content_filter_results\n            ? {}\n            : {\n                contentFilterResults:\n                  parseContentFilterResultsForChoiceOutput(content_filter_results),\n              }),\n        })),\n  };\n}\n\nfunction parseMessage(message: ChatResponseMessageOutput): ChatResponseMessage {\n  const { context, tool_calls, ...rest } = message;\n  return {\n    ...camelCaseKeys(rest),\n    toolCalls: tool_calls ?? [],\n    ...(!context\n      ? {}\n      : {\n          context: {\n            ...(!context.messages\n              ? {}\n              : {\n                  messages: context.messages.map(parseMessage),\n                }),\n          },\n        }),\n  };\n}\n\nfunction parseError(error: ErrorModel): { error: ErrorModel } {\n  return {\n    error: {\n      ...error,\n      details: error[\"details\"] ?? [],\n    },\n  };\n}\n\nfunction parseContentFilterResultDetailsForPromptOutput({\n  error,\n  ...rest\n}: ContentFilterResultDetailsForPromptOutput = {}): ContentFilterResultDetailsForPrompt {\n  return error ? parseError(error) : camelCaseKeys(rest);\n}\n\nfunction parseContentFilterResultsForChoiceOutput({\n  error,\n  ...rest\n}: ContentFilterResultsForChoiceOutput = {}): ContentFilterResultsForChoice {\n  return error ? parseError(error) : camelCaseKeys(rest);\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * THIS IS AN AUTO-GENERATED FILE - DO NOT EDIT!\n *\n * Any changes you make here may be lost.\n *\n * If you need to make changes, please do so in the original source file, \\{project-root\\}/sources/custom\n */\n\nimport { StreamableMethod, operationOptionsToRequestParameters } from \"@azure-rest/core-client\";\nimport { createFile } from \"@azure/core-rest-pipeline\";\nimport { uint8ArrayToString } from \"@azure/core-util\";\nimport {\n  AudioResult,\n  AudioResultFormat,\n  AudioResultSimpleJson,\n  GetAudioTranscriptionOptions,\n  GetAudioTranslationOptions,\n} from \"../../../models/audio.js\";\nimport {\n  AudioTranscription,\n  AudioTranscriptionOptions,\n  AudioTranslation,\n  AudioTranslationOptions,\n  ChatCompletions,\n  ChatCompletionsOptions,\n  ChatRequestMessage,\n  Completions,\n  CompletionsOptions,\n  Embeddings,\n  EmbeddingsOptions,\n  EventStream,\n  ImageGenerations,\n} from \"../../../models/models.js\";\nimport {\n  ClientOpenAIClientGetAudioTranscriptionAsPlainTextOptions,\n  ClientOpenAIClientGetAudioTranscriptionAsResponseObjectOptions,\n  ClientOpenAIClientGetAudioTranslationAsPlainTextOptions,\n  ClientOpenAIClientGetAudioTranslationAsResponseObjectOptions,\n  ClientOpenAIClientGetChatCompletionsOptions,\n  ClientOpenAIClientGetChatCompletionsWithAzureExtensionsOptions,\n  ClientOpenAIClientGetCompletionsOptions,\n  ClientOpenAIClientGetEmbeddingsOptions,\n  ClientOpenAIClientGetImageGenerationsOptions,\n  GetChatCompletionsOptions,\n  GetCompletionsOptions,\n  GetImagesOptions,\n} from \"../../../models/options.js\";\nimport {\n  AzureChatExtensionConfiguration,\n  OpenAIContext as Client,\n  GetAudioTranscriptionAsPlainText200Response,\n  GetAudioTranscriptionAsPlainTextDefaultResponse,\n  GetAudioTranscriptionAsResponseObject200Response,\n  GetAudioTranscriptionAsResponseObjectDefaultResponse,\n  GetAudioTranslationAsPlainText200Response,\n  GetAudioTranslationAsPlainTextDefaultResponse,\n  GetAudioTranslationAsResponseObject200Response,\n  GetAudioTranslationAsResponseObjectDefaultResponse,\n  GetChatCompletions200Response,\n  GetChatCompletionsDefaultResponse,\n  GetChatCompletionsWithAzureExtensions200Response,\n  GetChatCompletionsWithAzureExtensionsDefaultResponse,\n  GetCompletions200Response,\n  GetCompletionsDefaultResponse,\n  GetEmbeddings200Response,\n  GetEmbeddingsDefaultResponse,\n  GetImageGenerations200Response,\n  GetImageGenerationsDefaultResponse,\n  isUnexpected,\n  ChatRequestMessage as RestChatRequestMessage,\n} from \"../../../rest/index.js\";\nimport { getOaiSSEs } from \"../../oaiSse.js\";\nimport { camelCaseKeys, snakeCaseKeys } from \"../../util.js\";\nimport { getChatCompletionsResult, getCompletionsResult } from \"./deserializers.js\";\nimport {\n  ChatCompletionsOptions as GeneratedChatCompletionsOptions,\n  ImageGenerationOptions as GeneratedImageGenerationOptions,\n} from \"../../../models/models.js\";\n\nexport function _getAudioTranscriptionAsPlainTextSend(\n  context: Client,\n  deploymentId: string,\n  body: AudioTranscriptionOptions,\n  options: ClientOpenAIClientGetAudioTranscriptionAsPlainTextOptions = {\n    requestOptions: {},\n  },\n): StreamableMethod<\n  GetAudioTranscriptionAsPlainText200Response | GetAudioTranscriptionAsPlainTextDefaultResponse\n> {\n  return context.path(\"/deployments/{deploymentId}/audio/transcriptions\", deploymentId).post({\n    ...operationOptionsToRequestParameters(options),\n    body: {\n      file: uint8ArrayToString(body[\"file\"], \"base64\"),\n      filename: body[\"filename\"],\n      response_format: body[\"responseFormat\"],\n      language: body[\"language\"],\n      prompt: body[\"prompt\"],\n      temperature: body[\"temperature\"],\n      model: body[\"model\"],\n    },\n  }) as StreamableMethod<\n    GetAudioTranscriptionAsPlainText200Response | GetAudioTranscriptionAsPlainTextDefaultResponse\n  >;\n}\n\nexport async function _getAudioTranscriptionAsPlainTextDeserialize(\n  result:\n    | GetAudioTranscriptionAsPlainText200Response\n    | GetAudioTranscriptionAsPlainTextDefaultResponse,\n): Promise<string> {\n  if (isUnexpected(result)) {\n    throw result.body;\n  }\n\n  return result.body;\n}\n\n/**\n * Gets transcribed text and associated metadata from provided spoken audio data. Audio will be transcribed in the\n * written language corresponding to the language it was spoken in.\n */\nexport async function getAudioTranscriptionAsPlainText(\n  context: Client,\n  deploymentId: string,\n  body: AudioTranscriptionOptions,\n  options: ClientOpenAIClientGetAudioTranscriptionAsPlainTextOptions = {\n    requestOptions: {},\n  },\n): Promise<string> {\n  const result = await _getAudioTranscriptionAsPlainTextSend(context, deploymentId, body, options);\n  return _getAudioTranscriptionAsPlainTextDeserialize(result);\n}\n\nexport function _getAudioTranscriptionAsResponseObjectSend(\n  context: Client,\n  deploymentId: string,\n  body: AudioTranscriptionOptions,\n  options: ClientOpenAIClientGetAudioTranscriptionAsResponseObjectOptions = {\n    requestOptions: {},\n  },\n): StreamableMethod<\n  | GetAudioTranscriptionAsResponseObject200Response\n  | GetAudioTranscriptionAsResponseObjectDefaultResponse\n> {\n  return context.path(\"/deployments/{deploymentId}/audio/transcriptions\", deploymentId).post({\n    ...operationOptionsToRequestParameters(options),\n    contentType: (options.contentType as any) ?? \"multipart/form-data\",\n    body: {\n      file: uint8ArrayToString(body[\"file\"], \"base64\"),\n      filename: body[\"filename\"],\n      response_format: body[\"responseFormat\"],\n      language: body[\"language\"],\n      prompt: body[\"prompt\"],\n      temperature: body[\"temperature\"],\n      model: body[\"model\"],\n    },\n  }) as StreamableMethod<\n    | GetAudioTranscriptionAsResponseObject200Response\n    | GetAudioTranscriptionAsResponseObjectDefaultResponse\n  >;\n}\n\nexport async function _getAudioTranscriptionAsResponseObjectDeserialize(\n  result:\n    | GetAudioTranscriptionAsResponseObject200Response\n    | GetAudioTranscriptionAsResponseObjectDefaultResponse,\n): Promise<AudioTranscription> {\n  if (isUnexpected(result)) {\n    throw result.body;\n  }\n\n  return {\n    text: result.body[\"text\"],\n    task: result.body[\"task\"],\n    language: result.body[\"language\"],\n    duration: result.body[\"duration\"],\n    segments: !result.body[\"segments\"]\n      ? result.body[\"segments\"]\n      : result.body[\"segments\"].map((p) => ({\n          id: p[\"id\"],\n          start: p[\"start\"],\n          end: p[\"end\"],\n          text: p[\"text\"],\n          temperature: p[\"temperature\"],\n          avgLogprob: p[\"avg_logprob\"],\n          compressionRatio: p[\"compression_ratio\"],\n          noSpeechProb: p[\"no_speech_prob\"],\n          tokens: p[\"tokens\"],\n          seek: p[\"seek\"],\n        })),\n  };\n}\n\n/**\n * Gets transcribed text and associated metadata from provided spoken audio data. Audio will be transcribed in the\n * written language corresponding to the language it was spoken in.\n */\nexport async function getAudioTranscriptionAsResponseObject(\n  context: Client,\n  deploymentId: string,\n  body: AudioTranscriptionOptions,\n  options: ClientOpenAIClientGetAudioTranscriptionAsResponseObjectOptions = {\n    requestOptions: {},\n  },\n): Promise<AudioTranscription> {\n  const result = await _getAudioTranscriptionAsResponseObjectSend(\n    context,\n    deploymentId,\n    body,\n    options,\n  );\n  return _getAudioTranscriptionAsResponseObjectDeserialize(result);\n}\n\nexport function _getAudioTranslationAsPlainTextSend(\n  context: Client,\n  deploymentId: string,\n  body: AudioTranslationOptions,\n  options: ClientOpenAIClientGetAudioTranslationAsPlainTextOptions = {\n    requestOptions: {},\n  },\n): StreamableMethod<\n  GetAudioTranslationAsPlainText200Response | GetAudioTranslationAsPlainTextDefaultResponse\n> {\n  return context.path(\"/deployments/{deploymentId}/audio/translations\", deploymentId).post({\n    ...operationOptionsToRequestParameters(options),\n    body: {\n      file: uint8ArrayToString(body[\"file\"], \"base64\"),\n      filename: body[\"filename\"],\n      response_format: body[\"responseFormat\"],\n      prompt: body[\"prompt\"],\n      temperature: body[\"temperature\"],\n      model: body[\"model\"],\n    },\n  }) as StreamableMethod<\n    GetAudioTranslationAsPlainText200Response | GetAudioTranslationAsPlainTextDefaultResponse\n  >;\n}\n\nexport async function _getAudioTranslationAsPlainTextDeserialize(\n  result: GetAudioTranslationAsPlainText200Response | GetAudioTranslationAsPlainTextDefaultResponse,\n): Promise<string> {\n  if (isUnexpected(result)) {\n    throw result.body;\n  }\n\n  return result.body;\n}\n\n/** Gets English language transcribed text and associated metadata from provided spoken audio data. */\nexport async function getAudioTranslationAsPlainText(\n  context: Client,\n  deploymentId: string,\n  body: AudioTranslationOptions,\n  options: ClientOpenAIClientGetAudioTranslationAsPlainTextOptions = {\n    requestOptions: {},\n  },\n): Promise<string> {\n  const result = await _getAudioTranslationAsPlainTextSend(context, deploymentId, body, options);\n  return _getAudioTranslationAsPlainTextDeserialize(result);\n}\n\nexport function _getAudioTranslationAsResponseObjectSend(\n  context: Client,\n  deploymentId: string,\n  body: AudioTranslationOptions,\n  options: ClientOpenAIClientGetAudioTranslationAsResponseObjectOptions = {\n    requestOptions: {},\n  },\n): StreamableMethod<\n  | GetAudioTranslationAsResponseObject200Response\n  | GetAudioTranslationAsResponseObjectDefaultResponse\n> {\n  return context.path(\"/deployments/{deploymentId}/audio/translations\", deploymentId).post({\n    ...operationOptionsToRequestParameters(options),\n    contentType: (options.contentType as any) ?? \"multipart/form-data\",\n    body: {\n      file: uint8ArrayToString(body[\"file\"], \"base64\"),\n      filename: body[\"filename\"],\n      response_format: body[\"responseFormat\"],\n      prompt: body[\"prompt\"],\n      temperature: body[\"temperature\"],\n      model: body[\"model\"],\n    },\n  }) as StreamableMethod<\n    | GetAudioTranslationAsResponseObject200Response\n    | GetAudioTranslationAsResponseObjectDefaultResponse\n  >;\n}\n\nexport async function _getAudioTranslationAsResponseObjectDeserialize(\n  result:\n    | GetAudioTranslationAsResponseObject200Response\n    | GetAudioTranslationAsResponseObjectDefaultResponse,\n): Promise<AudioTranslation> {\n  if (isUnexpected(result)) {\n    throw result.body;\n  }\n\n  return {\n    text: result.body[\"text\"],\n    task: result.body[\"task\"],\n    language: result.body[\"language\"],\n    duration: result.body[\"duration\"],\n    segments: !result.body[\"segments\"]\n      ? result.body[\"segments\"]\n      : result.body[\"segments\"].map((p) => ({\n          id: p[\"id\"],\n          start: p[\"start\"],\n          end: p[\"end\"],\n          text: p[\"text\"],\n          temperature: p[\"temperature\"],\n          avgLogprob: p[\"avg_logprob\"],\n          compressionRatio: p[\"compression_ratio\"],\n          noSpeechProb: p[\"no_speech_prob\"],\n          tokens: p[\"tokens\"],\n          seek: p[\"seek\"],\n        })),\n  };\n}\n\n/** Gets English language transcribed text and associated metadata from provided spoken audio data. */\nexport async function getAudioTranslationAsResponseObject(\n  context: Client,\n  deploymentId: string,\n  body: AudioTranslationOptions,\n  options: ClientOpenAIClientGetAudioTranslationAsResponseObjectOptions = {\n    requestOptions: {},\n  },\n): Promise<AudioTranslation> {\n  const result = await _getAudioTranslationAsResponseObjectSend(\n    context,\n    deploymentId,\n    body,\n    options,\n  );\n  return _getAudioTranslationAsResponseObjectDeserialize(result);\n}\n\nexport function _getCompletionsSend(\n  context: Client,\n  deploymentId: string,\n  body: CompletionsOptions,\n  options: ClientOpenAIClientGetCompletionsOptions = { requestOptions: {} },\n): StreamableMethod<GetCompletions200Response | GetCompletionsDefaultResponse> {\n  return context.path(\"/deployments/{deploymentId}/completions\", deploymentId).post({\n    ...operationOptionsToRequestParameters(options),\n    body: {\n      prompt: body[\"prompt\"],\n      max_tokens: body[\"maxTokens\"],\n      temperature: body[\"temperature\"],\n      top_p: body[\"topP\"],\n      logit_bias: body[\"logitBias\"],\n      user: body[\"user\"],\n      n: body[\"n\"],\n      logprobs: body[\"logprobs\"],\n      echo: body[\"echo\"],\n      stop: body[\"stop\"],\n      presence_penalty: body[\"presencePenalty\"],\n      frequency_penalty: body[\"frequencyPenalty\"],\n      best_of: body[\"bestOf\"],\n      stream: body[\"stream\"],\n      model: body[\"model\"],\n    },\n  });\n}\n\n/**\n * Gets completions for the provided input prompts.\n * Completions support a wide variety of tasks and generate text that continues from or \"completes\"\n * provided prompt data.\n */\nexport async function getCompletions(\n  context: Client,\n  deploymentName: string,\n  prompt: string[],\n  options: GetCompletionsOptions = { requestOptions: {} },\n): Promise<Completions> {\n  const { abortSignal, onResponse, requestOptions, tracingOptions, ...rest } = options;\n  const response = await _getCompletionsSend(\n    context,\n    deploymentName,\n    {\n      prompt,\n      ...rest,\n    },\n    { abortSignal, onResponse, requestOptions, tracingOptions },\n  );\n  return _getCompletionsDeserialize(response);\n}\n\nexport async function _getCompletionsDeserialize(\n  result: GetCompletions200Response | GetCompletionsDefaultResponse,\n): Promise<Completions> {\n  if (isUnexpected(result)) {\n    throw result.body.error;\n  }\n  return getCompletionsResult(result.body);\n}\n\nexport async function _getChatCompletionsDeserialize(\n  result: GetChatCompletions200Response | GetChatCompletionsDefaultResponse,\n): Promise<ChatCompletions> {\n  if (isUnexpected(result)) {\n    throw result.body.error;\n  }\n  return getChatCompletionsResult(result.body);\n}\n\nexport function _getImageGenerationsSend(\n  context: Client,\n  deploymentId: string,\n  body: GeneratedImageGenerationOptions,\n  options: ClientOpenAIClientGetImageGenerationsOptions = { requestOptions: {} },\n): StreamableMethod<GetImageGenerations200Response | GetImageGenerationsDefaultResponse> {\n  return context.path(\"/deployments/{deploymentId}/images/generations\", deploymentId).post({\n    ...operationOptionsToRequestParameters(options),\n    body: {\n      model: body[\"model\"],\n      prompt: body[\"prompt\"],\n      n: body[\"n\"],\n      size: body[\"size\"],\n      response_format: body[\"responseFormat\"],\n      quality: body[\"quality\"],\n      style: body[\"style\"],\n      user: body[\"user\"],\n    },\n  });\n}\n\nexport async function _getImageGenerationsDeserialize(\n  result: GetImageGenerations200Response | GetImageGenerationsDefaultResponse,\n): Promise<ImageGenerations> {\n  if (isUnexpected(result)) {\n    throw result.body.error;\n  }\n\n  return {\n    created: new Date(result.body[\"created\"]),\n    data: result.body[\"data\"].map((p) => ({\n      url: p[\"url\"],\n      base64Data: p[\"b64_json\"],\n      revisedPrompt: p[\"revised_prompt\"],\n    })),\n  };\n}\n\n/** Creates an image given a prompt. */\nexport async function getImageGenerations(\n  context: Client,\n  deploymentId: string,\n  body: GeneratedImageGenerationOptions,\n  options: ClientOpenAIClientGetImageGenerationsOptions = { requestOptions: {} },\n): Promise<ImageGenerations> {\n  const result = await _getImageGenerationsSend(context, deploymentId, body, options);\n  return _getImageGenerationsDeserialize(result);\n}\n\nexport function _getEmbeddingsSend(\n  context: Client,\n  deploymentId: string,\n  body: EmbeddingsOptions,\n  options: ClientOpenAIClientGetEmbeddingsOptions = { requestOptions: {} },\n): StreamableMethod<GetEmbeddings200Response | GetEmbeddingsDefaultResponse> {\n  return context.path(\"/deployments/{deploymentId}/embeddings\", deploymentId).post({\n    ...operationOptionsToRequestParameters(options),\n    body: { user: body[\"user\"], model: body[\"model\"], input: body[\"input\"] },\n  });\n}\n\nexport async function _getEmbeddingsDeserialize(\n  result: GetEmbeddings200Response | GetEmbeddingsDefaultResponse,\n): Promise<Embeddings> {\n  if (isUnexpected(result)) {\n    throw result.body.error;\n  }\n\n  return {\n    data: result.body[\"data\"].map((p) => ({\n      embedding: p[\"embedding\"],\n      index: p[\"index\"],\n    })),\n    usage: {\n      promptTokens: result.body.usage[\"prompt_tokens\"],\n      totalTokens: result.body.usage[\"total_tokens\"],\n    },\n  };\n}\n\n/** Return the embeddings for a given prompt. */\nexport async function getEmbeddings(\n  context: Client,\n  deploymentId: string,\n  body: EmbeddingsOptions,\n  options: ClientOpenAIClientGetEmbeddingsOptions = { requestOptions: {} },\n): Promise<Embeddings> {\n  const result = await _getEmbeddingsSend(context, deploymentId, body, options);\n  return _getEmbeddingsDeserialize(result);\n}\n\nexport function streamCompletions(\n  context: Client,\n  deploymentName: string,\n  prompt: string[],\n  options: GetCompletionsOptions = { requestOptions: {} },\n): Promise<EventStream<Omit<Completions, \"usage\">>> {\n  const { abortSignal, onResponse, requestOptions, tracingOptions, ...rest } = options;\n  const response = _getCompletionsSend(\n    context,\n    deploymentName,\n    {\n      prompt,\n      ...rest,\n      stream: true,\n    },\n    { abortSignal, onResponse, requestOptions, tracingOptions },\n  );\n  return getOaiSSEs(response, getCompletionsResult);\n}\n\nexport async function getImages(\n  context: Client,\n  deploymentName: string,\n  prompt: string,\n  options: GetImagesOptions = { requestOptions: {} },\n): Promise<ImageGenerations> {\n  const { abortSignal, onResponse, requestOptions, tracingOptions, ...rest } = options;\n  const result = await _getImageGenerationsSend(\n    context,\n    deploymentName,\n    { prompt, ...rest },\n    { abortSignal, onResponse, requestOptions, tracingOptions },\n  );\n  return _getImageGenerationsDeserialize(result);\n}\n\nexport function streamChatCompletions(\n  context: Client,\n  deploymentName: string,\n  messages: ChatRequestMessage[],\n  options: GetChatCompletionsOptions = { requestOptions: {} },\n): Promise<EventStream<ChatCompletions>> {\n  const response = _getChatCompletionsSendX(context, deploymentName, messages, {\n    ...options,\n    stream: true,\n  });\n  return getOaiSSEs(response, getChatCompletionsResult);\n}\n\n/**\n * Gets chat completions for the provided chat messages.\n * Completions support a wide variety of tasks and generate text that continues from or \"completes\"\n * provided prompt data.\n */\nexport async function getChatCompletions(\n  context: Client,\n  deploymentName: string,\n  messages: ChatRequestMessage[],\n  options: GetChatCompletionsOptions = { requestOptions: {} },\n): Promise<ChatCompletions> {\n  const result = await _getChatCompletionsSendX(context, deploymentName, messages, options);\n  return _getChatCompletionsDeserialize(result);\n}\n/**\n * Returns the translation of an audio file.\n * @param context - The context containing the client to use for this request.\n * @param deploymentName - The name of the model deployment (when using Azure OpenAI) or model name (when using non-Azure OpenAI) to use for this request.\n * @param fileContent - The content of the audio file to translate.\n * @param options - The options for this audio translation request.\n * @returns The audio translation result.\n */\nexport async function getAudioTranslation(\n  context: Client,\n  deploymentName: string,\n  fileContent: Uint8Array,\n  options?: GetAudioTranslationOptions,\n): Promise<AudioResultSimpleJson>;\n/**\n * Returns the translation of an audio file.\n * @param context - The context containing the client to use for this request.\n * @param deploymentName - The name of the model deployment (when using Azure OpenAI) or model name (when using non-Azure OpenAI) to use for this request.\n * @param fileContent - The content of the audio file to translate.\n * @param format - The format of the result object. See {@link AudioResultFormat} for possible values.\n * @param options - The options for this audio translation request.\n * @returns The audio translation result.\n */\nexport async function getAudioTranslation<Format extends AudioResultFormat>(\n  context: Client,\n  deploymentName: string,\n  fileContent: Uint8Array,\n  format: Format,\n  options?: GetAudioTranslationOptions,\n): Promise<AudioResult<Format>>;\nexport async function getAudioTranslation<Format extends AudioResultFormat>(\n  context: Client,\n  deploymentName: string,\n  fileContent: Uint8Array,\n  formatOrOptions?: Format | GetAudioTranslationOptions,\n  inputOptions?: GetAudioTranslationOptions,\n): Promise<AudioResult<Format>> {\n  const options =\n    inputOptions ?? (typeof formatOrOptions === \"string\" ? {} : formatOrOptions ?? {});\n  const response_format = typeof formatOrOptions === \"string\" ? formatOrOptions : undefined;\n  const { abortSignal, onResponse, requestOptions, tracingOptions, ...rest } = options;\n  const { body, status } = await context\n    .pathUnchecked(\"deployments/{deploymentName}/audio/translations\", deploymentName)\n    .post({\n      ...operationOptionsToRequestParameters({\n        abortSignal,\n        onResponse,\n        tracingOptions,\n        requestOptions,\n      }),\n      contentType: \"multipart/form-data\",\n      body: {\n        ...snakeCaseKeys(rest),\n        file: createFile(fileContent, \"placeholder.wav\"),\n        ...(response_format ? { response_format } : {}),\n      },\n    });\n  if (status !== \"200\") {\n    throw body.error;\n  }\n\n  return response_format !== \"verbose_json\"\n    ? body\n    : (camelCaseKeys(body) as unknown as AudioResult<Format>);\n}\n\n/**\n * Returns the transcription of an audio file in a simple JSON format.\n * @param context - The context containing the client to use for this request.\n * @param deploymentName - The name of the model deployment (when using Azure OpenAI) or model name (when using non-Azure OpenAI) to use for this request.\n * @param fileContent - The content of the audio file to transcribe.\n * @param options - The options for this audio transcription request.\n * @returns The audio transcription result in a simple JSON format.\n */\nexport async function getAudioTranscription(\n  context: Client,\n  deploymentName: string,\n  fileContent: Uint8Array,\n  options?: GetAudioTranscriptionOptions,\n): Promise<AudioResultSimpleJson>;\n/**\n * Returns the transcription of an audio file.\n * @param context - The context containing the client to use for this request.\n * @param deploymentName - The name of the model deployment (when using Azure OpenAI) or model name (when using non-Azure OpenAI) to use for this request.\n * @param fileContent - The content of the audio file to transcribe.\n * @param format - The format of the result object. See {@link AudioResultFormat} for possible values.\n * @param options - The options for this audio transcription request.\n * @returns The audio transcription result in a format of your choice.\n */\nexport async function getAudioTranscription<Format extends AudioResultFormat>(\n  context: Client,\n  deploymentName: string,\n  fileContent: Uint8Array,\n  format: Format,\n  options?: GetAudioTranscriptionOptions,\n): Promise<AudioResult<Format>>;\nexport async function getAudioTranscription<Format extends AudioResultFormat>(\n  context: Client,\n  deploymentName: string,\n  fileContent: Uint8Array,\n  formatOrOptions?: Format | GetAudioTranscriptionOptions,\n  inputOptions?: GetAudioTranscriptionOptions,\n): Promise<AudioResult<Format>> {\n  const options =\n    inputOptions ?? (typeof formatOrOptions === \"string\" ? {} : formatOrOptions ?? {});\n  const response_format = typeof formatOrOptions === \"string\" ? formatOrOptions : undefined;\n  const { abortSignal, onResponse, requestOptions, tracingOptions, ...rest } = options;\n  const { body, status } = await context\n    .pathUnchecked(\"deployments/{deploymentName}/audio/transcriptions\", deploymentName)\n    .post({\n      ...operationOptionsToRequestParameters({\n        abortSignal,\n        onResponse,\n        tracingOptions,\n        requestOptions,\n      }),\n      contentType: \"multipart/form-data\",\n      body: {\n        ...snakeCaseKeys(rest),\n        file: createFile(fileContent, \"placeholder.wav\"),\n        ...(response_format ? { response_format } : {}),\n      },\n    });\n  if (status !== \"200\") {\n    throw body.error;\n  }\n\n  return response_format !== \"verbose_json\"\n    ? body\n    : (camelCaseKeys(body) as unknown as AudioResult<Format>);\n}\n\nfunction _getChatCompletionsSendX(\n  context: Client,\n  deploymentName: string,\n  messages: ChatRequestMessage[],\n  options: GetChatCompletionsOptions & { stream?: boolean } = { requestOptions: {} },\n): StreamableMethod<\n  | GetChatCompletionsWithAzureExtensions200Response\n  | GetChatCompletionsWithAzureExtensionsDefaultResponse\n> {\n  const {\n    azureExtensionOptions,\n    abortSignal,\n    onResponse,\n    requestOptions,\n    tracingOptions,\n    ...rest\n  } = options;\n  const coreOptions = {\n    abortSignal,\n    onResponse,\n    requestOptions,\n    tracingOptions,\n  };\n  const azure = {\n    ...(!azureExtensionOptions?.extensions\n      ? {}\n      : { dataSources: azureExtensionOptions.extensions }),\n    ...(!azureExtensionOptions?.enhancements\n      ? {}\n      : { enhancements: azureExtensionOptions.enhancements }),\n  };\n  return azure.dataSources || azure.enhancements\n    ? _getChatCompletionsWithAzureExtensionsSend(\n        context,\n        deploymentName,\n        {\n          messages,\n          ...rest,\n          ...azure,\n        },\n        coreOptions,\n      )\n    : _getChatCompletionsSend(context, deploymentName, { messages, ...rest }, coreOptions);\n}\n\nfunction _getChatCompletionsWithAzureExtensionsSend(\n  context: Client,\n  deploymentName: string,\n  body: GeneratedChatCompletionsOptions,\n  options: ClientOpenAIClientGetChatCompletionsOptions = { requestOptions: {} },\n): StreamableMethod<\n  | GetChatCompletionsWithAzureExtensions200Response\n  | GetChatCompletionsWithAzureExtensionsDefaultResponse\n> {\n  const { functions, functionCall, messages, dataSources, ...rest } = body;\n  return context\n    .path(\"/deployments/{deploymentId}/extensions/chat/completions\", deploymentName)\n    .post({\n      ...operationOptionsToRequestParameters(options),\n      body: {\n        ...snakeCaseKeys(rest),\n        dataSources: dataSources?.map(\n          ({ type, ...opts }) => ({ type, parameters: opts }) as AzureChatExtensionConfiguration,\n        ),\n        functions,\n        function_call: functionCall,\n        messages: messages.map(serializeChatRequestMessage),\n      },\n    });\n}\n\nfunction serializeChatRequestMessage(message: ChatRequestMessage): RestChatRequestMessage {\n  if (message.content === undefined) {\n    message.content = null;\n  }\n  switch (message.role) {\n    case \"assistant\": {\n      const { functionCall, toolCalls, ...rest } = message;\n      return {\n        ...snakeCaseKeys(rest),\n        ...(!toolCalls || toolCalls.length === 0 ? {} : { tool_calls: toolCalls }),\n        ...(functionCall ? { function_call: functionCall } : {}),\n      };\n    }\n    default: {\n      return snakeCaseKeys(message);\n    }\n  }\n}\n\nfunction _getChatCompletionsSend(\n  context: Client,\n  deploymentName: string,\n  body: GeneratedChatCompletionsOptions,\n  options: ClientOpenAIClientGetChatCompletionsOptions = { requestOptions: {} },\n): StreamableMethod<GetChatCompletions200Response | GetChatCompletionsDefaultResponse> {\n  const { functions, functionCall, messages, ...rest } = body;\n  return context.path(\"/deployments/{deploymentId}/chat/completions\", deploymentName).post({\n    ...operationOptionsToRequestParameters(options),\n    body: {\n      ...snakeCaseKeys(rest),\n      functions,\n      function_call: functionCall,\n      messages: messages.map(serializeChatRequestMessage),\n    },\n  });\n}\n\nexport async function _getChatCompletionsWithAzureExtensionsDeserialize(): Promise<any> {\n  return {} as any;\n}\n\nexport async function getChatCompletionsWithAzureExtensions(\n  _context: Client,\n  _deploymentId: string,\n  _body: ChatCompletionsOptions,\n  _options: ClientOpenAIClientGetChatCompletionsWithAzureExtensionsOptions = {},\n): Promise<ChatCompletions> {\n  return {} as any;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * THIS IS AN AUTO-GENERATED FILE - DO NOT EDIT!\n *\n * Any changes you make here may be lost.\n *\n * If you need to make changes, please do so in the original source file, \\{project-root\\}/sources/custom\n */\n\nimport { PipelinePolicy } from \"@azure/core-rest-pipeline\";\n\nexport function nonAzurePolicy(): PipelinePolicy {\n  const policy: PipelinePolicy = {\n    name: \"openAiEndpoint\",\n    sendRequest: (request, next) => {\n      const obj = new URL(request.url);\n      const parts = obj.pathname.split(\"/\");\n      switch (parts[parts.length - 1]) {\n        case \"completions\":\n          if (parts[parts.length - 2] === \"chat\") {\n            obj.pathname = `${parts[1]}/chat/completions`;\n          } else {\n            obj.pathname = `${parts[1]}/completions`;\n          }\n          break;\n        case \"embeddings\":\n          obj.pathname = `${parts[1]}/embeddings`;\n          break;\n        case \"generations\":\n          if (parts[parts.length - 2] === \"images\") {\n            obj.pathname = `${parts[1]}/images/generations`;\n          } else {\n            throw new Error(\"Unexpected path\");\n          }\n          break;\n        case \"transcriptions\":\n          obj.pathname = `${parts[1]}/audio/transcriptions`;\n          break;\n        case \"translations\":\n          obj.pathname = `${parts[1]}/audio/translations`;\n          break;\n      }\n      obj.searchParams.delete(\"api-version\");\n      request.url = obj.toString();\n      return next(request);\n    },\n  };\n  return policy;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * THIS IS AN AUTO-GENERATED FILE - DO NOT EDIT!\n *\n * Any changes you make here may be lost.\n *\n * If you need to make changes, please do so in the original source file, \\{project-root\\}/sources/custom\n */\n\nimport { KeyCredential, TokenCredential, isTokenCredential } from \"@azure/core-auth\";\nimport {\n  getAudioTranscription,\n  getAudioTranslation,\n  getImages,\n  streamChatCompletions,\n  streamCompletions,\n} from \"./api/index.js\";\nimport {\n  getChatCompletions,\n  getCompletions,\n  getEmbeddings,\n} from \"./api/client/openAIClient/index.js\";\nimport { OpenAIClientOptions, OpenAIContext, createOpenAI } from \"./api/index.js\";\nimport { nonAzurePolicy } from \"./api/policies/nonAzure.js\";\nimport {\n  AudioResult,\n  AudioResultFormat,\n  AudioResultSimpleJson,\n  GetAudioTranscriptionOptions,\n  GetAudioTranslationOptions,\n} from \"./models/audio.js\";\nimport {\n  GetImagesOptions,\n  GetCompletionsOptions,\n  GetEmbeddingsOptions,\n  GetChatCompletionsOptions,\n} from \"./models/options.js\";\nimport {\n  ChatCompletions,\n  ChatRequestMessage,\n  Completions,\n  Embeddings,\n  EventStream,\n  ImageGenerations,\n} from \"./models/models.js\";\n\nexport { OpenAIClientOptions } from \"./api/OpenAIContext.js\";\n\n/**\n * A client for interacting with Azure OpenAI.\n *\n * The client needs the endpoint of an OpenAI resource and an authentication\n * method such as an API key or token. The API key and endpoint can be found in\n * the OpenAI resource page. They will be located in the resource's Keys and Endpoint page.\n *\n * ### Examples for authentication:\n *\n * #### API Key\n *\n * ```js\n * import { OpenAIClient } from \"@azure/openai\";\n * import { AzureKeyCredential } from \"@azure/core-auth\";\n *\n * const endpoint = \"<azure endpoint>\";\n * const credential = new AzureKeyCredential(\"<api key>\");\n *\n * const client = new OpenAIClient(endpoint, credential);\n * ```\n *\n * #### Azure Active Directory\n *\n * ```js\n * import { OpenAIClient } from \"@azure/openai\";\n * import { DefaultAzureCredential } from \"@azure/identity\";\n *\n * const endpoint = \"<azure endpoint>\";\n * const credential = new DefaultAzureCredential();\n *\n * const client = new OpenAIClient(endpoint, credential);\n * ```\n */\nexport class OpenAIClient {\n  private _client: OpenAIContext;\n  private _isAzure = false;\n\n  /**\n   * Initializes an instance of OpenAIClient for use with an Azure OpenAI resource.\n   * @param endpoint - The URI for an Azure OpenAI resource, including protocol and hostname.\n   *                 For example: https://my-resource.openai.azure.com.\n   * @param credential - A key credential used to authenticate to an Azure OpenAI resource.\n   * @param options - The options for configuring the client.\n   * @remarks\n   *   This constructor initializes an OpenAIClient object that can only be used with Azure OpenAI resources.\n   *   To use OpenAIClient with a non-Azure OpenAI inference endpoint, use a constructor that accepts a non-Azure OpenAI API key instead.\n   */\n  constructor(endpoint: string, credential: KeyCredential, options?: OpenAIClientOptions);\n  /**\n   * Initializes an instance of OpenAIClient for use with an Azure OpenAI resource.\n   * @param endpoint - The URI for an Azure OpenAI resource, including protocol and hostname.\n   *                 For example: https://my-resource.openai.azure.com.\n   * @param credential - A token credential used to authenticate with an Azure OpenAI resource.\n   * @param options - The options for configuring the client.\n   */\n  constructor(endpoint: string, credential: TokenCredential, options?: OpenAIClientOptions);\n  /**\n   * Initializes an instance of OpenAIClient for use with the non-Azure OpenAI endpoint.\n   * @param openAiApiKey - The API key to use when connecting to the non-Azure OpenAI endpoint.\n   * @param options - The options for configuring the client.\n   * @remarks\n   *   OpenAIClient objects initialized with this constructor can only be used with the non-Azure OpenAI inference endpoint.\n   *   To use OpenAIClient with an Azure OpenAI resource, use a constructor that accepts a resource URI and Azure authentication credential instead.\n   */\n  constructor(openAiApiKey: KeyCredential, options?: OpenAIClientOptions);\n  constructor(\n    endpointOrOpenAiKey: string | KeyCredential,\n    credOrOptions: KeyCredential | TokenCredential | OpenAIClientOptions = {},\n    options: OpenAIClientOptions = {},\n  ) {\n    let opts: OpenAIClientOptions;\n    let endpoint: string;\n    let cred: KeyCredential | TokenCredential;\n    if (isCred(credOrOptions)) {\n      endpoint = endpointOrOpenAiKey as string;\n      cred = credOrOptions;\n      opts = options;\n      this._isAzure = true;\n    } else {\n      endpoint = createOpenAIEndpoint(1);\n      cred = endpointOrOpenAiKey as KeyCredential;\n      const { credentials, ...restOpts } = credOrOptions;\n      opts = {\n        credentials: {\n          apiKeyHeaderName: credentials?.apiKeyHeaderName ?? \"Authorization\",\n          scopes: credentials?.scopes,\n        },\n        ...restOpts,\n      };\n    }\n\n    this._client = createOpenAI(endpoint, cred, {\n      ...opts,\n      ...(this._isAzure\n        ? {}\n        : {\n            additionalPolicies: [\n              ...(opts.additionalPolicies ?? []),\n              {\n                position: \"perCall\",\n                policy: nonAzurePolicy(),\n              },\n            ],\n          }),\n    });\n  }\n\n  /**\n   * Returns textual completions as configured for a given prompt.\n   * @param deploymentName - Specifies either the model deployment name (when using Azure OpenAI) or model name (when using non-Azure OpenAI) to use for this request.\n   * @param prompt - The prompt to use for this request.\n   * @param options - The options for this completions request.\n   * @returns The completions for the given prompt.\n   */\n  getCompletions(\n    deploymentName: string,\n    prompt: string[],\n    options: GetCompletionsOptions = { requestOptions: {} },\n  ): Promise<Completions> {\n    this.setModel(deploymentName, options);\n    return getCompletions(this._client, deploymentName, prompt, options);\n  }\n\n  /**\n   * Lists the completions tokens as they become available for a given prompt.\n   * @param deploymentName - The name of the model deployment (when using Azure OpenAI) or model name (when using non-Azure OpenAI) to use for this request.\n   * @param prompt - The prompt to use for this request.\n   * @param options - The completions options for this completions request.\n   * @returns An asynchronous iterable of completions tokens.\n   */\n  streamCompletions(\n    deploymentName: string,\n    prompt: string[],\n    options: GetCompletionsOptions = {},\n  ): Promise<EventStream<Omit<Completions, \"usage\">>> {\n    this.setModel(deploymentName, options);\n    return streamCompletions(this._client, deploymentName, prompt, options);\n  }\n\n  /**\n   * Return the computed embeddings for a given prompt.\n   * @param deploymentName - The name of the model deployment (when using Azure OpenAI) or model name (when using non-Azure OpenAI) to use for this request.\n   * @param input - The prompt to use for this request.\n   * @param options - The embeddings options for this embeddings request.\n   * @returns The embeddings for the given prompt.\n   */\n  getEmbeddings(\n    deploymentName: string,\n    input: string[],\n    options: GetEmbeddingsOptions = { requestOptions: {} },\n  ): Promise<Embeddings> {\n    this.setModel(deploymentName, options);\n    return getEmbeddings(this._client, deploymentName, { input, ...options }, options);\n  }\n\n  /**\n   * Get chat completions for provided chat context messages.\n   * @param deploymentName - The name of the model deployment (when using Azure OpenAI) or model name (when using non-Azure OpenAI) to use for this request.\n   * @param messages - The chat context messages to use for this request.\n   * @param options - The chat completions options for this completions request.\n   * @returns The chat completions for the given chat context messages.\n   */\n  getChatCompletions(\n    deploymentName: string,\n    messages: ChatRequestMessage[],\n    options: GetChatCompletionsOptions = { requestOptions: {} },\n  ): Promise<ChatCompletions> {\n    this.setModel(deploymentName, options);\n    return getChatCompletions(this._client, deploymentName, messages, options);\n  }\n\n  /**\n   * Lists the chat completions tokens as they become available for a chat context.\n   * @param deploymentName - The name of the model deployment (when using Azure OpenAI) or model name (when using non-Azure OpenAI) to use for this request.\n   * @param messages - The chat context messages to use for this request.\n   * @param options - The chat completions options for this chat completions request.\n   * @returns An asynchronous iterable of chat completions tokens.\n   */\n  streamChatCompletions(\n    deploymentName: string,\n    messages: ChatRequestMessage[],\n    options: GetChatCompletionsOptions = { requestOptions: {} },\n  ): Promise<EventStream<ChatCompletions>> {\n    this.setModel(deploymentName, options);\n    return streamChatCompletions(this._client, deploymentName, messages, options);\n  }\n\n  /**\n   * Starts the generation of a batch of images from a text caption\n   * @param deploymentName - The name of the model deployment (when using Azure OpenAI) or model name (when using non-Azure OpenAI) to use for this request.\n   * @param prompt - The prompt to use for this request.\n   * @param options - The options for this image request.\n   * @returns The image generation response (containing url or base64 data).\n   */\n  getImages(\n    deploymentName: string,\n    prompt: string,\n    options: GetImagesOptions = { requestOptions: {} },\n  ): Promise<ImageGenerations> {\n    this.setModel(deploymentName, options);\n    return getImages(this._client, deploymentName, prompt, options);\n  }\n\n  /**\n   * Returns the transcription of an audio file in a simple JSON format.\n   * @param deploymentName - The name of the model deployment (when using Azure OpenAI) or model name (when using non-Azure OpenAI) to use for this request.\n   * @param fileContent - The content of the audio file to transcribe.\n   * @param options - The options for this audio transcription request.\n   * @returns The audio transcription result in a simple JSON format.\n   */\n  async getAudioTranscription(\n    deploymentName: string,\n    fileContent: Uint8Array,\n    options?: GetAudioTranscriptionOptions,\n  ): Promise<AudioResultSimpleJson>;\n  /**\n   * Returns the transcription of an audio file.\n   * @param deploymentName - The name of the model deployment (when using Azure OpenAI) or model name (when using non-Azure OpenAI) to use for this request.\n   * @param fileContent - The content of the audio file to transcribe.\n   * @param format - The format of the result object. See {@link AudioResultFormat} for possible values.\n   * @param options - The options for this audio transcription request.\n   * @returns The audio transcription result in a format of your choice.\n   */\n  async getAudioTranscription<Format extends AudioResultFormat>(\n    deploymentName: string,\n    fileContent: Uint8Array,\n    format: Format,\n    options?: GetAudioTranscriptionOptions,\n  ): Promise<AudioResult<Format>>;\n  async getAudioTranscription<Format extends AudioResultFormat>(\n    deploymentName: string,\n    fileContent: Uint8Array,\n    formatOrOptions?: Format | GetAudioTranscriptionOptions,\n    inputOptions?: GetAudioTranscriptionOptions,\n  ): Promise<AudioResult<Format>> {\n    const options =\n      inputOptions ?? (typeof formatOrOptions === \"string\" ? {} : formatOrOptions ?? {});\n    const response_format = typeof formatOrOptions === \"string\" ? formatOrOptions : undefined;\n    this.setModel(deploymentName, options);\n    if (response_format === undefined) {\n      return getAudioTranscription(this._client, deploymentName, fileContent, options) as Promise<\n        AudioResult<Format>\n      >;\n    }\n\n    return getAudioTranscription(\n      this._client,\n      deploymentName,\n      fileContent,\n      response_format,\n      options,\n    );\n  }\n\n  /**\n   * Returns the translation of an audio file.\n   * @param deploymentName - The name of the model deployment (when using Azure OpenAI) or model name (when using non-Azure OpenAI) to use for this request.\n   * @param fileContent - The content of the audio file to translate.\n   * @param options - The options for this audio translation request.\n   * @returns The audio translation result.\n   */\n  async getAudioTranslation(\n    deploymentName: string,\n    fileContent: Uint8Array,\n    options?: GetAudioTranslationOptions,\n  ): Promise<AudioResultSimpleJson>;\n  /**\n   * Returns the translation of an audio file.\n   * @param deploymentName - The name of the model deployment (when using Azure OpenAI) or model name (when using non-Azure OpenAI) to use for this request.\n   * @param fileContent - The content of the audio file to translate.\n   * @param format - The format of the result object. See {@link AudioResultFormat} for possible values.\n   * @param options - The options for this audio translation request.\n   * @returns The audio translation result.\n   */\n  async getAudioTranslation<Format extends AudioResultFormat>(\n    deploymentName: string,\n    fileContent: Uint8Array,\n    format: Format,\n    options?: GetAudioTranslationOptions,\n  ): Promise<AudioResult<Format>>;\n  async getAudioTranslation<Format extends AudioResultFormat>(\n    deploymentName: string,\n    fileContent: Uint8Array,\n    formatOrOptions?: Format | GetAudioTranslationOptions,\n    inputOptions?: GetAudioTranslationOptions,\n  ): Promise<AudioResult<Format>> {\n    const options =\n      inputOptions ?? (typeof formatOrOptions === \"string\" ? {} : formatOrOptions ?? {});\n    const response_format = typeof formatOrOptions === \"string\" ? formatOrOptions : undefined;\n    this.setModel(deploymentName, options);\n    if (response_format === undefined) {\n      return getAudioTranslation(this._client, deploymentName, fileContent, options) as Promise<\n        AudioResult<Format>\n      >;\n    }\n\n    return getAudioTranslation(this._client, deploymentName, fileContent, response_format, options);\n  }\n\n  private setModel(model: string, options: Record<string, any>): void {\n    if (!this._isAzure) {\n      options.model = model;\n    }\n  }\n}\n\nfunction createOpenAIEndpoint(version: number): string {\n  return `https://api.openai.com/v${version}`;\n}\n\nfunction isCred(cred: Record<string, any>): cred is TokenCredential | KeyCredential {\n  return isTokenCredential(cred) || cred.key !== undefined;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * THIS IS AN AUTO-GENERATED FILE - DO NOT EDIT!\n *\n * Any changes you make here may be lost.\n *\n * If you need to make changes, please do so in the original source file, \\{project-root\\}/sources/custom\n */\n\nimport { KeyCredential } from \"@azure/core-auth\";\n\n/**\n * The OpenAIKeyCredential class represents an OpenAI API key\n * and is used to authenticate into an OpenAI client for\n * an OpenAI endpoint.\n */\nexport class OpenAIKeyCredential implements KeyCredential {\n  private _key: string;\n\n  /**\n   * Create an instance of an AzureKeyCredential for use\n   * with a service client.\n   *\n   * @param key - The initial value of the key to use in authentication\n   */\n  constructor(key: string) {\n    if (!key) {\n      throw new Error(\"key must be a non-empty string\");\n    }\n\n    this._key = createKey(key);\n  }\n\n  /**\n   * The value of the key to be used in authentication\n   */\n  public get key(): string {\n    return this._key;\n  }\n\n  /**\n   * Change the value of the key.\n   *\n   * Updates will take effect upon the next request after\n   * updating the key value.\n   *\n   * @param newKey - The new key value to be used\n   */\n  public update(newKey: string): void {\n    this._key = createKey(newKey);\n  }\n}\n\nfunction createKey(key: string): string {\n  return key.startsWith(\"Bearer \") ? key : `Bearer ${key}`;\n}\n"],"names":["createClientLogger","getClient","RestError","__await","createSseStream","__rest","operationOptionsToRequestParameters","createFile","isTokenCredential"],"mappings":"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"}